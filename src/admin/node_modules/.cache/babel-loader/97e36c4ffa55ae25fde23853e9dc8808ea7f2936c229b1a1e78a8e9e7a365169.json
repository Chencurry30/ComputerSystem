{"ast":null,"code":"//表单验证的各个参数或者方法\n/*\r\n * @author 李国强\r\n * @date 2022/10/23\r\n * @Description: 校验数据的公共方法\r\n*/\n// 账号{要求2-12位}\nlet usernameReg = /^[a-zA-Z0-9]{2,12}$/;\n\n// 电话{要求11位}\nlet phoneReg = /^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/;\n\n// 密码{6-12位}\nlet passwordReg = /^(?=.*[a-zA-Z])(?=.*\\d).{6,12}$/;\n\n//验证年龄\nlet ageReg = /^120$|^[1-9]$|^(1[0-1]|[1-9])\\d$/;\n\n//验证邮箱 \nlet emailReg = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/;\n\n//验证昵称\nlet nicknameReg = /^[\\u4e00-\\u9fa5a-zA-Z0-9]{2,12}$/;\n\n//验证个人留言 \nlet personalMessageReg = /^[\\u4e00-\\u9fa5]{1,20}$/;\n\n//验证是否为空数据\n\nlet FormValidate = function () {\n  function FormValidate() {}\n  // From表单验证规则  可用于公用的校验部分\n  FormValidate.Form = function () {\n    return {\n      //只用于账号的验证规则\n      validateUserName(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入账号'));\n        }\n        if (!usernameReg.test(value)) {\n          callback(new Error('账号必须为2-12位(必须包含数字与字母)'));\n        } else {\n          callback();\n        }\n      },\n      //电话号码的验证\n      validatePhone(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入手机号码'));\n        }\n        if (!phoneReg.test(value)) {\n          callback(new Error('手机格式不正确'));\n        } else {\n          callback();\n        }\n      },\n      //用户密码的验证\n      validatePassWord(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入密码'));\n        }\n        if (!passwordReg.test(value)) {\n          callback(new Error('密码为6-12位(必须包含数字和字母)'));\n        } else {\n          callback();\n        }\n      },\n      //只用于年龄的验证规则\n      validataAge(rule, value, callback) {\n        if (value !== '') {\n          if (!ageReg.test(value)) {\n            callback(new Error('年龄的范围为1-120'));\n          } else {\n            callback();\n          }\n        } else {\n          callback('请输入年龄');\n        }\n      },\n      //邮箱的验证规则\n      validateEmail(rule, value, callback) {\n        if (value !== '') {\n          if (!emailReg.test(value)) {\n            console.log(123);\n            callback(new Error('邮箱格式不正确'));\n          } else {\n            callback();\n          }\n        } else {\n          callback(new Error('请输入邮箱'));\n        }\n      },\n      //昵称的验证\n      validateNickName(rule, value, callback) {\n        if (value !== '') {\n          if (!nicknameReg.test(value)) {\n            callback(new Error('格式不对(2-12位(数字,字母,中文))'));\n          } else {\n            callback();\n          }\n        } else {\n          callback(new Error('请输入昵称'));\n        }\n      },\n      //个人留言的验证\n      validatePersonalMessage(rule, value, callback) {\n        if (value !== '') {\n          if (!personalMessageReg.test(value)) {\n            callback(new Error('留言格式不对(2~20)只能是中文'));\n          } else {\n            callback();\n          }\n        } else {\n          callback(new Error('请输入个人留言'));\n        }\n      },\n      //数据是否为空的验证\n      validateJudgeData(rule, value, callback) {\n        if (value === '') {\n          callback(new Error('请输入输入框中提示的数据'));\n        } else {\n          callback();\n        }\n      }\n    };\n  };\n  return FormValidate;\n}();\nexports.FormValidate = FormValidate;","map":{"version":3,"names":["usernameReg","phoneReg","passwordReg","ageReg","emailReg","nicknameReg","personalMessageReg","FormValidate","Form","validateUserName","rule","value","callback","Error","test","validatePhone","validatePassWord","validataAge","validateEmail","console","log","validateNickName","validatePersonalMessage","validateJudgeData","exports"],"sources":["E:/web项目/改版后台/computer_system/src/admin/src/utils/rules.js"],"sourcesContent":["//表单验证的各个参数或者方法\r\n/*\r\n * @author 李国强\r\n * @date 2022/10/23\r\n * @Description: 校验数据的公共方法\r\n*/\r\n// 账号{要求2-12位}\r\nlet usernameReg = /^[a-zA-Z0-9]{2,12}$/\r\n\r\n// 电话{要求11位}\r\nlet phoneReg = /^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/\r\n\r\n// 密码{6-12位}\r\nlet passwordReg = /^(?=.*[a-zA-Z])(?=.*\\d).{6,12}$/\r\n\r\n//验证年龄\r\nlet ageReg = /^120$|^[1-9]$|^(1[0-1]|[1-9])\\d$/\r\n\r\n//验证邮箱 \r\nlet emailReg = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/\r\n\r\n//验证昵称\r\nlet nicknameReg = /^[\\u4e00-\\u9fa5a-zA-Z0-9]{2,12}$/\r\n\r\n//验证个人留言 \r\nlet personalMessageReg = /^[\\u4e00-\\u9fa5]{1,20}$/\r\n\r\n//验证是否为空数据\r\n\r\n\r\n\r\nlet FormValidate = (function () {\r\n  function FormValidate() { }\r\n  // From表单验证规则  可用于公用的校验部分\r\n  FormValidate.Form = function () {\r\n    return {\r\n      //只用于账号的验证规则\r\n      validateUserName(rule, value, callback) {\r\n        if (value === '') {\r\n          return callback(new Error('请输入账号'))\r\n        }\r\n        if (!usernameReg.test(value)) {\r\n          callback(new Error('账号必须为2-12位(必须包含数字与字母)'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n      //电话号码的验证\r\n      validatePhone(rule, value, callback) {\r\n        if (value === '') {\r\n          return callback(new Error('请输入手机号码'))\r\n        }\r\n        if (!phoneReg.test(value)) {\r\n          callback(new Error('手机格式不正确'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n      //用户密码的验证\r\n      validatePassWord(rule, value, callback) {\r\n        if (value === '') {\r\n          return callback(new Error('请输入密码'))\r\n        }\r\n        if (!passwordReg.test(value)) {\r\n          callback(new Error('密码为6-12位(必须包含数字和字母)'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n      //只用于年龄的验证规则\r\n      validataAge(rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!ageReg.test(value)) {\r\n            callback(new Error('年龄的范围为1-120'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback('请输入年龄')\r\n        }\r\n      },\r\n      //邮箱的验证规则\r\n      validateEmail(rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!emailReg.test(value)) {\r\n            console.log(123);\r\n            callback(new Error('邮箱格式不正确'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback(new Error('请输入邮箱'))\r\n        }\r\n      },\r\n      //昵称的验证\r\n      validateNickName(rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!nicknameReg.test(value)) {\r\n            callback(new Error('格式不对(2-12位(数字,字母,中文))'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback(new Error('请输入昵称'))\r\n        }\r\n      },\r\n      //个人留言的验证\r\n      validatePersonalMessage(rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!personalMessageReg.test(value)) {\r\n            callback(new Error('留言格式不对(2~20)只能是中文'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback(new Error('请输入个人留言'))\r\n        }\r\n      },\r\n      //数据是否为空的验证\r\n      validateJudgeData(rule, value, callback) {\r\n        if (value === '') {\r\n          callback(new Error('请输入输入框中提示的数据'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n\r\n    }\r\n  }\r\n  return FormValidate\r\n}())\r\n\r\nexports.FormValidate = FormValidate"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
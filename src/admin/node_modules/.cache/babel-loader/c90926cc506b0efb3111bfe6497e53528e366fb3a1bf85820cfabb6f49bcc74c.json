{"ast":null,"code":"//封装的相关函数\nimport { createUUID } from '../utils/uuid';\n//封装获取公钥的相关函数\nimport { getPublicKey } from '../services/systemService';\nconst encryption = {\n  namespaced: true,\n  //开启匿名空间\n  state: {\n    Algorithm: {\n      uuId: '',\n      //公钥的id\n      encryPtion: '' //公钥的信息\n    }\n  },\n\n  actions: {\n    getPubKey(context) {\n      let UUID = {\n        uuId: createUUID()\n      };\n      getPublicKey(UUID).then(res => {\n        // console.log(res);\n        if (res.data.code === 200) {\n          UUID.encryPtion = res.data.data;\n          context.commit('GETPUBKEY', UUID);\n        }\n      });\n    }\n  },\n  mutations: {\n    GETPUBKEY(state, data) {\n      state.Algorithm = data;\n    }\n  },\n  //返回获得的公钥以及公钥的键值对\n  getters: {\n    getkeyInfo(state) {\n      return state.Algorithm;\n    }\n  }\n};\nexport default encryption;","map":{"version":3,"names":["createUUID","getPublicKey","encryption","namespaced","state","Algorithm","uuId","encryPtion","actions","getPubKey","context","UUID","then","res","data","code","commit","mutations","GETPUBKEY","getters","getkeyInfo"],"sources":["E:/web项目/改版后台/computer_system/src/admin/src/store/encryption.js"],"sourcesContent":["//封装的相关函数\r\nimport {createUUID} from '../utils/uuid'\r\n//封装获取公钥的相关函数\r\nimport {getPublicKey} from '../services/systemService'\r\n\r\nconst encryption = {\r\n    namespaced:true,   //开启匿名空间\r\n    state:{\r\n      Algorithm:{\r\n        uuId:'',          //公钥的id\r\n        encryPtion:'',    //公钥的信息\r\n      }\r\n    },\r\n    actions:{\r\n      getPubKey(context){\r\n        let UUID = {\r\n          uuId:createUUID()\r\n        }\r\n        getPublicKey(UUID).then((res)=>{\r\n          // console.log(res);\r\n          if(res.data.code === 200){\r\n            UUID.encryPtion = res.data.data\r\n            context.commit('GETPUBKEY',UUID)\r\n          }\r\n        })\r\n      }\r\n\r\n    },\r\n    mutations:{\r\n      GETPUBKEY(state,data){\r\n        state.Algorithm = data\r\n      }\r\n    },\r\n    //返回获得的公钥以及公钥的键值对\r\n    getters:{\r\n      getkeyInfo(state){\r\n        return state.Algorithm\r\n      }\r\n    }\r\n}\r\n\r\nexport default encryption\r\n"],"mappings":"AAAA;AACA,SAAQA,UAAU,QAAO,eAAe;AACxC;AACA,SAAQC,YAAY,QAAO,2BAA2B;AAEtD,MAAMC,UAAU,GAAG;EACfC,UAAU,EAAC,IAAI;EAAI;EACnBC,KAAK,EAAC;IACJC,SAAS,EAAC;MACRC,IAAI,EAAC,EAAE;MAAW;MAClBC,UAAU,EAAC,EAAE,CAAK;IACpB;EACF,CAAC;;EACDC,OAAO,EAAC;IACNC,SAAS,CAACC,OAAO,EAAC;MAChB,IAAIC,IAAI,GAAG;QACTL,IAAI,EAACN,UAAU;MACjB,CAAC;MACDC,YAAY,CAACU,IAAI,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAG;QAC7B;QACA,IAAGA,GAAG,CAACC,IAAI,CAACC,IAAI,KAAK,GAAG,EAAC;UACvBJ,IAAI,CAACJ,UAAU,GAAGM,GAAG,CAACC,IAAI,CAACA,IAAI;UAC/BJ,OAAO,CAACM,MAAM,CAAC,WAAW,EAACL,IAAI,CAAC;QAClC;MACF,CAAC,CAAC;IACJ;EAEF,CAAC;EACDM,SAAS,EAAC;IACRC,SAAS,CAACd,KAAK,EAACU,IAAI,EAAC;MACnBV,KAAK,CAACC,SAAS,GAAGS,IAAI;IACxB;EACF,CAAC;EACD;EACAK,OAAO,EAAC;IACNC,UAAU,CAAChB,KAAK,EAAC;MACf,OAAOA,KAAK,CAACC,SAAS;IACxB;EACF;AACJ,CAAC;AAED,eAAeH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}
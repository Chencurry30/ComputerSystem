{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'BreadCrumb',\n  data() {\n    return {\n      breadList: [{\n        name: \"首页\",\n        path: \"/homeView\"\n      }],\n      isFirstload: true\n    };\n  },\n  methods: {\n    //获取面包屑的方法 \n    getBreadList(route) {\n      //因为监听路由开启的是立即监听，页面刷新的时候面包屑里面就绝对有两个元素 \n      let routeItem = {\n        name: route.name,\n        path: route.path\n      };\n      this.breadList.push(routeItem);\n      this.breadList = this.breadList.filter((item, index, selfArr) => {\n        let list = selfArr.map(item => {\n          return item.path;\n        });\n        return list.indexOf(item.path) === index;\n      });\n    },\n    //删除用户指定的当前的面包屑\n    delectRoute(routerItem) {\n      //使用filter过滤函数,过滤掉面包屑中点击删除的路由记录 \n      this.breadList = this.breadList.filter(item => {\n        return item.path !== routerItem.path;\n      });\n    }\n  },\n  watch: {\n    $route: {\n      handler(newvalue) {\n        //获取面包屑的List \n        this.getBreadList(newvalue);\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    ActiveRoute() {\n      return this.$route.path;\n    }\n  }\n};","map":{"version":3,"mappings":";AAeA;EACAA;EACAC;IACA;MACAC,YACA;QACAF;QACAG;MACA,EAEA;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;QAAAN;QAAAG;MAAA;MACA;MACA;QACA;UACA;QACA;QACA;MACA;IACA;IACA;IACAI;MACA;MACA;QACA;MACA;IACA;EAEA;EACAC;IACAC;MACAC;QACA;QACA;MACA;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;EACA;AACA","names":["name","data","breadList","path","isFirstload","methods","getBreadList","delectRoute","watch","$route","handler","immediate","computed","ActiveRoute"],"sourceRoot":"src/components/Breadcrumb","sources":["BreadCrumb.vue"],"sourcesContent":["<!--顶部的面包屑,随时跳转-->\r\n<template>\r\n  <div class=\"Breadcrumb\">\r\n    <el-breadcrumb class=\"BreadcrumbMain\" separator=\"×\">\r\n      <el-breadcrumb-item :to=\"routerItem.path\" class=\"bread-view-tags\" v-for=\"(routerItem) in breadList\"\r\n        :key=\"routerItem.path\" :class=\"{ active: ActiveRoute === routerItem.path }\">\r\n        <em class=\"routeName\" :class=\"{ firstRouteName: routerItem.path === '/homeView' }\">{{ routerItem.name }}</em>\r\n        <!--这里加上不等于,让首页的面包屑不能被删除-->\r\n        <i class=\"el-icon-close deleteRoute\" v-if=\"routerItem.path !== '/homeView'\" @click.stop=\"delectRoute(routerItem)\"></i>\r\n      </el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'BreadCrumb',\r\n  data() {\r\n    return {\r\n      breadList: [\r\n        {\r\n          name: \"首页\",\r\n          path: \"/homeView\"\r\n        }\r\n\r\n      ],\r\n      isFirstload: true,\r\n    }\r\n  },\r\n  methods: {\r\n    //获取面包屑的方法 \r\n    getBreadList(route) {\r\n      //因为监听路由开启的是立即监听，页面刷新的时候面包屑里面就绝对有两个元素 \r\n      let routeItem = { name: route.name, path: route.path }\r\n      this.breadList.push(routeItem)\r\n      this.breadList = this.breadList.filter((item, index, selfArr) => {\r\n        let list = selfArr.map(item => {\r\n          return item.path\r\n        })\r\n        return list.indexOf(item.path) === index\r\n      })\r\n    },\r\n    //删除用户指定的当前的面包屑\r\n    delectRoute(routerItem) {\r\n      //使用filter过滤函数,过滤掉面包屑中点击删除的路由记录 \r\n      this.breadList = this.breadList.filter(item => {\r\n        return item.path !== routerItem.path\r\n      })\r\n    }\r\n\r\n  },\r\n  watch: {\r\n    $route: {\r\n      handler(newvalue) {\r\n        //获取面包屑的List \r\n        this.getBreadList(newvalue)\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  computed: {\r\n    ActiveRoute() {\r\n      return this.$route.path\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.bread-view-tags {\r\n  display: inline-block;\r\n  position: relative;\r\n  height: 26px;\r\n  line-height: 26px;\r\n  border: 1px solid #d8dce5;\r\n  color: #495060;\r\n  background: #fff;\r\n  padding: 0 8px;\r\n  font-size: 14px;\r\n  margin-left: 5px;\r\n  margin-top: 4px;\r\n\r\n  //在bread-view-tags中的才会受到影响,其他的不会影响 \r\n  ::v-deep .el-breadcrumb__separator {\r\n    display: none;\r\n  }\r\n\r\n  .el-icon-close {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .routeName {\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    font-style: normal;\r\n  }\r\n\r\n  .firstRouteName {\r\n    margin-right: 10px;\r\n  }\r\n}\r\n//当前路由激活状态的显示 \r\n.active {\r\n  position: relative;\r\n  background-color: #42b983;\r\n  border-color: #42b983;\r\n\r\n  .routeName {\r\n    color: #fff;\r\n  }\r\n}\r\n.active ::before {\r\n  display: block;\r\n  position: absolute;\r\n  content: '';\r\n  top: 50%;\r\n  left: 10px;\r\n  width: 8px;\r\n  height: 8px;\r\n  transform: translate(-50%, -50%);\r\n  border-radius: 50%;\r\n  background: #fff;\r\n  z-index: 999;\r\n}\r\n.BreadcrumbMain {\r\n  height: 100%;\r\n  white-space: nowrap;\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100%;\r\n\r\n  .Breadcrumb {\r\n    padding: 2px 10px;\r\n  }\r\n}\r\n.deleteRoute{\r\n  cursor: pointer;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
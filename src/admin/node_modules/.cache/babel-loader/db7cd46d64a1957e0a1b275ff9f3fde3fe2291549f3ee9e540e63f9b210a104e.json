{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport rules from \"../../utils/rules\";\nimport Cookies from \"js-cookie\";\nimport { CryAlgorithm } from \"../../utils/uuid\";\nimport { userLogin } from \"../../services/systemService\";\nimport { mapGetters } from \"vuex\"; //获取公钥的相关配置\nimport { getNormPermissionRouteList } from '../../utils/Permisson/PermissonRoute';\nexport default {\n  name: \"loginView\",\n  data() {\n    return {\n      dataForm: {\n        username: \"\",\n        //账号\n        password: \"\" //密码\n      },\n\n      checkForm: {\n        //用户名校验\n        username: [{\n          validator: rules.FormValidate.Form().validateUserName,\n          trigger: \"blur\"\n        }],\n        //密码校验\n        password: [{\n          validator: rules.FormValidate.Form().validatePassWord,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  computed: {\n    //判断提交\n    canSubmit() {\n      const {\n        username,\n        password\n      } = this.dataForm;\n      return Boolean(username && password);\n    },\n    //获取公钥的ID以及公钥的内容\n    ...mapGetters(\"encryption\", {\n      getkeyInfo: \"getkeyInfo\"\n    })\n  },\n  methods: {\n    goToLogin() {\n      this.getPublicKey();\n      setTimeout(() => {\n        let data = {};\n        data.uuId = this.getkeyInfo.uuId;\n        data.username = this.dataForm.username;\n        data.password = CryAlgorithm(this.getkeyInfo.encryPtion, this.dataForm.password); //密码加密\n        userLogin(data).then(res => {\n          console.log(res);\n          if (res.data.code === 400) {\n            this.$message.error(\"用户名或密码错误，请重新输入！\");\n          } else if (res.data.code === 403) {\n            this.$message.error(\"该用户无权限访问！\");\n          } else {\n            let menulist = JSON.stringify(getNormPermissionRouteList(res.data.data.menuList));\n            let menuRight = JSON.stringify(res.data.data.rights);\n            sessionStorage.setItem(\"menulist\", menulist);\n            sessionStorage.setItem(\"menuRight\", menuRight);\n            Cookies.set(\"name\", this.dataForm.username); //保存用户名\n            const name = data.username;\n            if (res.data.code === 200) {\n              const token = res.data.data.token;\n              sessionStorage.setItem(\"token\", token); //保存token到本地浏览器\n              this.$message({\n                message: \"恭喜你，登录成功！欢迎用户: \" + name,\n                type: \"success\"\n              });\n              this.$router.push({\n                name: \"indexBox\"\n              });\n            } else if (res.data.data.menuList === null) {\n              this.$message({\n                message: \"无权限登录\",\n                type: \"success\"\n              });\n            }\n          }\n        });\n      }, 1500);\n    },\n    getPublicKey() {\n      this.$store.dispatch(\"encryption/getPubKey\");\n    }\n  }\n};","map":{"version":3,"mappings":";AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACA;MACAC;QACAC;QAAA;QACAC;MACA;;MACAC;QACA;QACAF,WACA;UACAG;UACAC;QACA,EACA;QACA;QACAH,WACA;UACAE;UACAC;QACA;MAEA;IACA;EACA;EACAC;IACA;IACAC;MACA;QAAAN;QAAAC;MAAA;MACA;IACA;IACA;IACA;MACAM;IACA;EACA;EACAC;IACAC;MACA;MACAC;QACA;QACAZ;QACAA;QACAA;QACAa;UACAC;UACA;YACA;UACA;YACA;UACA;YACA;YACA;YACAC;YACAA;YACAC;YACA;YACA;cACA;cACAD;cACA;gBACAE;gBACAC;cACA;cACA;gBAAAnB;cAAA;YACA;cACA;gBACAkB;gBACAC;cACA;YACA;UACA;QACA;MACA;IAGA;IACAC;MACA;IACA;EACA;AACA","names":["name","data","dataForm","username","password","checkForm","validator","trigger","computed","canSubmit","getkeyInfo","methods","goToLogin","setTimeout","userLogin","console","sessionStorage","Cookies","message","type","getPublicKey"],"sourceRoot":"src/views/baseView","sources":["loginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login_container\">\r\n    <div class=\"login_box\">\r\n      <div class=\"loge\">\r\n        <img src=\"../../assets/logo_pic.png\" alt=\"\" />\r\n        <p>计算机考验辅助系统</p>\r\n      </div>\r\n      <el-form label-width=\"0px\" class=\"login_in\" ref=\"dataForm\" :model=\"dataForm\" :rules=\"checkForm\">\r\n        <div class=\"form-info\">\r\n          <el-form-item prop=\"username\">\r\n            <el-input type=\"text\" prefix-icon=\"el-icon-user\" placeholder=\"请输入账号\" v-model.trim=\"dataForm.username\">\r\n            </el-input>\r\n          </el-form-item>\r\n\r\n          <el-form-item prop=\"password\">\r\n            <el-input type=\"password\" prefix-icon=\"el-icon-lock\" placeholder=\"请输入密码\"\r\n              v-model.trim=\"dataForm.password\"></el-input>\r\n          </el-form-item>\r\n        </div>\r\n\r\n        <el-form-item class=\"btns\">\r\n          <el-button type=\"primary\" @click=\"goToLogin\" :disabled=\"!canSubmit\">登&nbsp;&nbsp;&nbsp;&nbsp;录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport rules from \"../../utils/rules\";\r\nimport Cookies from \"js-cookie\";\r\nimport { CryAlgorithm } from \"../../utils/uuid\";\r\nimport { userLogin } from \"../../services/systemService\";\r\nimport { mapGetters } from \"vuex\"; //获取公钥的相关配置\r\nimport {getNormPermissionRouteList} from '../../utils/Permisson/PermissonRoute'\r\nexport default {\r\n  name: \"loginView\",\r\n  data() {\r\n    return {\r\n      dataForm: {\r\n        username: \"\", //账号\r\n        password: \"\", //密码\r\n      },\r\n      checkForm: {\r\n        //用户名校验\r\n        username: [\r\n          {\r\n            validator: rules.FormValidate.Form().validateUserName,\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n        //密码校验\r\n        password: [\r\n          {\r\n            validator: rules.FormValidate.Form().validatePassWord,\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    //判断提交\r\n    canSubmit() {\r\n      const { username, password } = this.dataForm;\r\n      return Boolean(username && password);\r\n    },\r\n    //获取公钥的ID以及公钥的内容\r\n    ...mapGetters(\"encryption\", {\r\n      getkeyInfo: \"getkeyInfo\",\r\n    }),\r\n  },\r\n  methods: {\r\n    goToLogin() {\r\n      this.getPublicKey()\r\n      setTimeout(() => {\r\n        let data = {};\r\n        data.uuId = this.getkeyInfo.uuId;\r\n        data.username = this.dataForm.username;\r\n        data.password = CryAlgorithm(this.getkeyInfo.encryPtion, this.dataForm.password) //密码加密\r\n        userLogin(data).then((res) => {\r\n          console.log(res);\r\n          if (res.data.code === 400) {\r\n            this.$message.error(\"用户名或密码错误，请重新输入！\");\r\n          } else if (res.data.code === 403) {\r\n            this.$message.error(\"该用户无权限访问！\");\r\n          } else {\r\n            let menulist = JSON.stringify(getNormPermissionRouteList(res.data.data.menuList));\r\n            let menuRight = JSON.stringify(res.data.data.rights);\r\n            sessionStorage.setItem(\"menulist\", menulist);\r\n            sessionStorage.setItem(\"menuRight\", menuRight);\r\n            Cookies.set(\"name\", this.dataForm.username); //保存用户名\r\n            const name = data.username;\r\n            if (res.data.code === 200) {\r\n              const token = res.data.data.token;\r\n              sessionStorage.setItem(\"token\", token); //保存token到本地浏览器\r\n              this.$message({\r\n                message: \"恭喜你，登录成功！欢迎用户: \" + name,\r\n                type: \"success\",\r\n              });\r\n              this.$router.push({ name: \"indexBox\" });\r\n            } else if (res.data.data.menuList === null) {\r\n              this.$message({\r\n                message: \"无权限登录\",\r\n                type: \"success\",\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }, 1500)\r\n\r\n\r\n    },\r\n    getPublicKey() {\r\n      this.$store.dispatch(\"encryption/getPubKey\");\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.login_container {\r\n  z-index: 55;\r\n  height: 100%;\r\n\r\n  .login_box {\r\n    width: 460px;\r\n    height: 420px;\r\n    background: #fff;\r\n    box-shadow: 0 0 10px 0 rgba(87, 190, 255, 0.2);\r\n    border-radius: 10px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n\r\n    .loge {\r\n      text-align: center;\r\n      font-family: \"微软雅黑\";\r\n      font-size: 24px;\r\n      color: #2f323e;\r\n      margin-top: 26px;\r\n    }\r\n\r\n    .login_in {\r\n      z-index: 999;\r\n      position: absolute;\r\n      top: 200px;\r\n      width: 100%;\r\n      padding: 0 20px;\r\n      box-sizing: border-box;\r\n\r\n      //选择方式\r\n      .navSelect {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        color: #ffffff;\r\n        font-size: 18px;\r\n        font-family: \"楷体\";\r\n\r\n        .select-left {\r\n          position: relative;\r\n          margin-left: 50px;\r\n          cursor: pointer;\r\n\r\n          .btn-selected {\r\n            position: absolute;\r\n            width: 60px;\r\n            height: 2px;\r\n            bottom: -1px;\r\n            left: 9px;\r\n            background-color: #ffffff;\r\n          }\r\n        }\r\n\r\n        .select-right {\r\n          position: relative;\r\n          margin-right: 50px;\r\n          cursor: pointer;\r\n\r\n          .btn-selected {\r\n            position: absolute;\r\n            width: 60px;\r\n            height: 2px;\r\n            bottom: -1px;\r\n            right: 9px;\r\n            background-color: #ffffff;\r\n          }\r\n        }\r\n      }\r\n\r\n      //修改了button的形式\r\n      .el-button {\r\n        padding: 12px 110px;\r\n      }\r\n\r\n      //修改输入框大小\r\n      .el-input {\r\n        left: 7%;\r\n        width: 360px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .btns {\r\n    margin-top: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n}\r\n\r\n/deep/.el-form-item__error {\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n  padding: 3px 0px;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 35px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
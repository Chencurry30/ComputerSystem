{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport const fnAddDynamicMenuRoutes = (menuList = [], routes = []) => {\n  // 用于保存存在子路由的路由数据\n  let route = [];\n  // 用于保存存在子路由的路由数据\n  let temp = [];\n  // 遍历数据\n  for (let i = 0; i < menuList.length; i++) {\n    // 存在子路由，则递归遍历，并返回数据作为 children 保存\n    if (menuList[i].children && menuList[i].children.length > 0) {\n      // 获取路由的基本格式\n      route = getRoute(menuList[i]);\n      // 递归处理子路由数据，并返回，将其作为路由的 children 保存\n      route.children = fnAddDynamicMenuRoutes(menuList[i].children);\n      // 保存存在子路由的路由\n      routes.push(route);\n    } else {\n      // 保存普通路由\n      temp.push(getRoute(menuList[i]));\n    }\n  }\n  // 返回路由结果\n  return routes.concat(temp);\n};\nfunction getRoute(item) {\n  // 路由基本格式\n  let route = {\n    // 路由的路径\n    path: item.path,\n    // 路由名\n    name: item.name,\n    // 路由所在组件\n    // component: (resolve) => require([`@/view`], resolve),\n    // 路由的子路由\n    children: []\n  };\n  // 返回 route\n  return route;\n}\nexport const Routes = (menuList = [], routes = []) => {\n  for (let i = 0; i < menuList.length; i++) {\n    var fatherPath = menuList[i].path;\n    for (let j = 0; j < menuList[i].children.length; j++) {\n      let paths = `${fatherPath}${menuList[i].children[j].path}`;\n      let item = {\n        name: menuList[i].children[j].name,\n        path: menuList[i].children[j].path,\n        component: loadView(paths)\n      };\n      routes.push(item);\n    }\n  }\n};\nexport const loadView = viewPath => {\n  // 用字符串模板实现动态 import 从而实现路由懒加载\n  return () => import(`../views${viewPath}`);\n};","map":{"version":3,"names":["fnAddDynamicMenuRoutes","menuList","routes","route","temp","i","length","children","getRoute","push","concat","item","path","name","Routes","fatherPath","j","paths","component","loadView","viewPath"],"sources":["E:/web项目/改版后台/computer_system/src/admin/src/router/permission.js"],"sourcesContent":["\r\nexport const fnAddDynamicMenuRoutes  = (menuList = [], routes = []) => {\r\n  // 用于保存存在子路由的路由数据\r\n  let route = []\r\n   // 用于保存存在子路由的路由数据\r\n   let  temp= []\r\n  // 遍历数据\r\n  for (let i = 0; i < menuList.length; i++) {\r\n    // 存在子路由，则递归遍历，并返回数据作为 children 保存\r\n    if (menuList[i].children && menuList[i].children.length > 0) {\r\n      // 获取路由的基本格式\r\n      route = getRoute(menuList[i])\r\n      // 递归处理子路由数据，并返回，将其作为路由的 children 保存\r\n      route.children = fnAddDynamicMenuRoutes(menuList[i].children)\r\n      // 保存存在子路由的路由\r\n      routes.push(route)\r\n    } else {\r\n      // 保存普通路由\r\n      temp.push(getRoute(menuList[i]))\r\n    }\r\n  }\r\n  // 返回路由结果\r\n  return routes.concat(temp)\r\n}\r\nfunction getRoute (item) {\r\n  // 路由基本格式\r\n  let route = {\r\n    // 路由的路径\r\n    path: item.path,\r\n    // 路由名\r\n    name: item.name,\r\n    // 路由所在组件\r\n    // component: (resolve) => require([`@/view`], resolve),\r\n    // 路由的子路由\r\n    children: []\r\n  }\r\n  // 返回 route\r\n  return route\r\n}\r\n\r\nexport const Routes = (menuList=[],routes=[]) =>{\r\n  for(let i=0;i<menuList.length;i++){\r\n    var fatherPath = menuList[i].path\r\n    for(let j=0;j<menuList[i].children.length;j++){\r\n      let paths = `${fatherPath}${menuList[i].children[j].path}`\r\n      let item = {\r\n        name:menuList[i].children[j].name,\r\n        path:menuList[i].children[j].path,\r\n        component: loadView(paths)\r\n      }\r\n      routes.push(item)\r\n    }\r\n  }\r\n}\r\nexport const loadView =(viewPath) =>{\r\n  // 用字符串模板实现动态 import 从而实现路由懒加载\r\n  return () => import(`../views${viewPath}`)\r\n }"],"mappings":";AACA,OAAO,MAAMA,sBAAsB,GAAI,CAACC,QAAQ,GAAG,EAAE,EAAEC,MAAM,GAAG,EAAE,KAAK;EACrE;EACA,IAAIC,KAAK,GAAG,EAAE;EACb;EACA,IAAKC,IAAI,GAAE,EAAE;EACd;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC;IACA,IAAIJ,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,IAAIN,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAACD,MAAM,GAAG,CAAC,EAAE;MAC3D;MACAH,KAAK,GAAGK,QAAQ,CAACP,QAAQ,CAACI,CAAC,CAAC,CAAC;MAC7B;MACAF,KAAK,CAACI,QAAQ,GAAGP,sBAAsB,CAACC,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAAC;MAC7D;MACAL,MAAM,CAACO,IAAI,CAACN,KAAK,CAAC;IACpB,CAAC,MAAM;MACL;MACAC,IAAI,CAACK,IAAI,CAACD,QAAQ,CAACP,QAAQ,CAACI,CAAC,CAAC,CAAC,CAAC;IAClC;EACF;EACA;EACA,OAAOH,MAAM,CAACQ,MAAM,CAACN,IAAI,CAAC;AAC5B,CAAC;AACD,SAASI,QAAQ,CAAEG,IAAI,EAAE;EACvB;EACA,IAAIR,KAAK,GAAG;IACV;IACAS,IAAI,EAAED,IAAI,CAACC,IAAI;IACf;IACAC,IAAI,EAAEF,IAAI,CAACE,IAAI;IACf;IACA;IACA;IACAN,QAAQ,EAAE;EACZ,CAAC;EACD;EACA,OAAOJ,KAAK;AACd;AAEA,OAAO,MAAMW,MAAM,GAAG,CAACb,QAAQ,GAAC,EAAE,EAACC,MAAM,GAAC,EAAE,KAAI;EAC9C,KAAI,IAAIG,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,QAAQ,CAACK,MAAM,EAACD,CAAC,EAAE,EAAC;IAChC,IAAIU,UAAU,GAAGd,QAAQ,CAACI,CAAC,CAAC,CAACO,IAAI;IACjC,KAAI,IAAII,CAAC,GAAC,CAAC,EAACA,CAAC,GAACf,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAACD,MAAM,EAACU,CAAC,EAAE,EAAC;MAC5C,IAAIC,KAAK,GAAI,GAAEF,UAAW,GAAEd,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAACS,CAAC,CAAC,CAACJ,IAAK,EAAC;MAC1D,IAAID,IAAI,GAAG;QACTE,IAAI,EAACZ,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAACS,CAAC,CAAC,CAACH,IAAI;QACjCD,IAAI,EAACX,QAAQ,CAACI,CAAC,CAAC,CAACE,QAAQ,CAACS,CAAC,CAAC,CAACJ,IAAI;QACjCM,SAAS,EAAEC,QAAQ,CAACF,KAAK;MAC3B,CAAC;MACDf,MAAM,CAACO,IAAI,CAACE,IAAI,CAAC;IACnB;EACF;AACF,CAAC;AACD,OAAO,MAAMQ,QAAQ,GAAGC,QAAQ,IAAI;EAClC;EACA,OAAO,MAAM,MAAM,CAAE,WAAUA,QAAS,EAAC,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
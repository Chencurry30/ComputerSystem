{"ast":null,"code":"import { createPublicUrl } from '../../utils/getPublicUrl';\nexport default {\n  name: 'videoPlay',\n  props: ['videoLink'],\n  data() {\n    return {\n      // 视频播放\n      playerOptions: {\n        playbackRates: [0.7, 1.0, 1.5, 2.0],\n        //播放速度\n        autoplay: false,\n        //如果true,浏览器准备好时开始回放。\n        muted: false,\n        // 默认情况下将会消除任何音频。\n        loop: false,\n        // 导致视频一结束就重新开始。\n        preload: 'auto',\n        // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\n        language: 'zh-CN',\n        aspectRatio: '16:9',\n        // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\n        fluid: true,\n        // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          type: \"video/mp4\",\n          src: `${createPublicUrl()}${this.videoLink}` //url地址          \n        }],\n\n        // width: document.documentElement.clientWidth,\n        notSupportedMessage: '此视频暂无法播放，请稍后再试',\n        //允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          durationDisplay: true,\n          remainingTimeDisplay: false,\n          fullscreenToggle: true //全屏按钮\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAQA;AACA;EACAA;EACAC;EAEAC;IACA;MACA;MACAC;QACAC;QAAA;QACAC;QAAA;QACAC;QAAA;QACAC;QAAA;QACAC;QAAA;QACAC;QACAC;QAAA;QACAC;QAAA;QACAC;UACAC;UACAC;QACA;;QAEA;QACAC;QAAA;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;MACA;IACA;EACA;AAEA","names":["name","props","data","playerOptions","playbackRates","autoplay","muted","loop","preload","language","aspectRatio","fluid","sources","type","src","notSupportedMessage","controlBar","timeDivider","durationDisplay","remainingTimeDisplay","fullscreenToggle"],"sourceRoot":"src/components/videoPlay","sources":["videoPlay.vue"],"sourcesContent":["<!-- 视屏播放的相关插件 -->\r\n<template>\r\n  <div class=\"videoPlay\">\r\n    <video-player class=\"video-player vjs-custom-skin\" ref=\"videoPlayer\" :playsinline=\"true\" :options=\"playerOptions\">\r\n    </video-player>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { createPublicUrl } from '../../utils/getPublicUrl'\r\nexport default {\r\n  name: 'videoPlay',\r\n  props: ['videoLink'],\r\n\r\n  data() {\r\n    return {\r\n      // 视频播放\r\n      playerOptions: {\r\n        playbackRates: [0.7, 1.0, 1.5, 2.0], //播放速度\r\n        autoplay: false, //如果true,浏览器准备好时开始回放。\r\n        muted: false, // 默认情况下将会消除任何音频。\r\n        loop: false, // 导致视频一结束就重新开始。\r\n        preload: 'auto', // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\r\n        language: 'zh-CN',\r\n        aspectRatio: '16:9', // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\r\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n        sources: [{\r\n          type: \"video/mp4\",\r\n          src: `${createPublicUrl()}${this.videoLink}`    //url地址          \r\n        }],\r\n  \r\n        // width: document.documentElement.clientWidth,\r\n        notSupportedMessage: '此视频暂无法播放，请稍后再试', //允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n        controlBar: {\r\n          timeDivider: true,\r\n          durationDisplay: true,\r\n          remainingTimeDisplay: false,\r\n          fullscreenToggle: true  //全屏按钮\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n<style scoped>\r\n.videoPlay{\r\n  width: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
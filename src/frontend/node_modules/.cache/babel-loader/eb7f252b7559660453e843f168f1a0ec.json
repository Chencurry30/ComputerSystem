{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _container = require('./container');\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\n\n\nvar Root = function (_Container) {\n  _inherits(Root, _Container);\n\n  function Root(defaults) {\n    _classCallCheck(this, Root);\n\n    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));\n\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n\n  Root.prototype.removeChild = function removeChild(child, ignore) {\n    var index = this.index(child);\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before;\n    }\n\n    return _Container.prototype.removeChild.call(this, child);\n  };\n\n  Root.prototype.normalize = function normalize(child, sample, type) {\n    var nodes = _Container.prototype.normalize.call(this, child);\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var node = _ref;\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n\n    return nodes;\n  };\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] - options with only `to` and `map` keys\n   *\n   * @return {Result} result with current root’s CSS\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' });\n   * const root2 = postcss.parse(css2, { from: 'b.css' });\n   * root1.append(root2);\n   * const result = root1.toResult({ to: 'all.css', map: true });\n   */\n\n\n  Root.prototype.toResult = function toResult() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var LazyResult = require('./lazy-result');\n\n    var Processor = require('./processor');\n\n    var lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  };\n  /**\n   * @memberof Root#\n   * @member {object} raws - Information to generate byte-to-byte equal\n   *                         node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n\n\n  return Root;\n}(_container2.default);\n\nexports.default = Root;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;IAUMA,I;;;EAEF,cAAYC,QAAZ,EAAsB;IAAAC;;IAAA,6CAClBC,sBAAMF,QAAN,CADkB;;IAElBG,MAAKC,IAAL,GAAY,MAAZ;IACA,IAAK,CAACD,MAAKE,KAAX,EAAmBF,MAAKE,KAAL,GAAa,EAAb;IAHD;EAIrB;;iBAEDC,c,qBAAYC,K,EAAOC,M,EAAQ;IACvB,IAAMC,QAAQ,KAAKA,KAAL,CAAWF,KAAX,CAAd;;IAEA,IAAK,CAACC,MAAD,IAAWC,UAAU,CAArB,IAA0B,KAAKJ,KAAL,CAAWK,MAAX,GAAoB,CAAnD,EAAuD;MACnD,KAAKL,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAnB,GAA4B,KAAKP,KAAL,CAAWI,KAAX,EAAkBE,IAAlB,CAAuBC,MAAnD;IACH;;IAED,OAAOV,qBAAMI,WAAN,YAAkBC,KAAlB,CAAP;;;iBAGJM,Y,mBAAUN,K,EAAOO,M,EAAQV,I,EAAM;IAC3B,IAAIC,QAAQH,qBAAMW,SAAN,YAAgBN,KAAhB,CAAZ;;IAEA,IAAKO,MAAL,EAAc;MACV,IAAKV,SAAS,SAAd,EAA0B;QACtB,IAAK,KAAKC,KAAL,CAAWK,MAAX,GAAoB,CAAzB,EAA6B;UACzBI,OAAOH,IAAPG,CAAYF,MAAZE,GAAqB,KAAKT,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAxCE;QADJ,OAEO;UACH,OAAOA,OAAOH,IAAPG,CAAYF,MAAnB;QACH;MALL,OAMO,IAAK,KAAKG,KAAL,KAAeD,MAApB,EAA6B;QAChC,qBAAkBT,KAAlB,kHAA0B;UAAA;;UAAA;YAAA;YAAAW;UAAA;YAAAC;YAAA;YAAAD;UAAA;;UAAA,IAAhBE,IAAgB;UACtBA,KAAKP,IAALO,CAAUN,MAAVM,GAAmBJ,OAAOH,IAAPG,CAAYF,MAA/BM;QACH;MACJ;IACJ;;IAED,OAAOb,KAAP;;EAGJ;;;;;;;;;;;;;;;iBAaAc,W,oBAAqB;IAAA,IAAZC,IAAY,uEAAL,EAAK;;IACjB,IAAIC,aAAaC,QAAQ,eAARA,CAAjB;;IACA,IAAIC,YAAaD,QAAQ,aAARA,CAAjB;;IAEA,IAAIE,OAAO,IAAIH,UAAJ,CAAe,IAAIE,SAAJ,EAAf,EAAgC,IAAhC,EAAsCH,IAAtC,CAAX;IACA,OAAOI,KAAKC,SAALD,EAAP;;EAGJ;;;;;;;;;;;;;;;;;;EA3DeE,mB;;kBA6EJ3B","names":["Root","defaults","_classCallCheck","_Container","_this","type","nodes","removeChild","child","ignore","index","length","raws","before","normalize","sample","first","_ref","_i","node","toResult","opts","LazyResult","require","Processor","lazy","stringify","Container"],"sources":["root.es6"],"sourcesContent":["import Container from './container';\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'root';\n        if ( !this.nodes ) this.nodes = [];\n    }\n\n    removeChild(child, ignore) {\n        const index = this.index(child);\n\n        if ( !ignore && index === 0 && this.nodes.length > 1 ) {\n            this.nodes[1].raws.before = this.nodes[index].raws.before;\n        }\n\n        return super.removeChild(child);\n    }\n\n    normalize(child, sample, type) {\n        let nodes = super.normalize(child);\n\n        if ( sample ) {\n            if ( type === 'prepend' ) {\n                if ( this.nodes.length > 1 ) {\n                    sample.raws.before = this.nodes[1].raws.before;\n                } else {\n                    delete sample.raws.before;\n                }\n            } else if ( this.first !== sample ) {\n                for ( let node of nodes ) {\n                    node.raws.before = sample.raws.before;\n                }\n            }\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Returns a {@link Result} instance representing the root’s CSS.\n     *\n     * @param {processOptions} [opts] - options with only `to` and `map` keys\n     *\n     * @return {Result} result with current root’s CSS\n     *\n     * @example\n     * const root1 = postcss.parse(css1, { from: 'a.css' });\n     * const root2 = postcss.parse(css2, { from: 'b.css' });\n     * root1.append(root2);\n     * const result = root1.toResult({ to: 'all.css', map: true });\n     */\n    toResult(opts = { }) {\n        let LazyResult = require('./lazy-result');\n        let Processor  = require('./processor');\n\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n\n    /**\n     * @memberof Root#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `after`: the space symbols after the last child to the end of file.\n     * * `semicolon`: is the last child has an (optional) semicolon.\n     *\n     * @example\n     * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n     * postcss.parse('a {}').raws   //=> { after: '' }\n     */\n\n}\n\nexport default Root;\n"]},"metadata":{},"sourceType":"module"}
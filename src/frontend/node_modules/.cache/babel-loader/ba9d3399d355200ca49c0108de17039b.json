{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\n\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string - space-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string - comma-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    var comma = ',';\n    return list.split(string, [comma], true);\n  }\n};\nexports.default = list;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;AASA,IAAIA,OAAO;EAEPC,KAFO,iBAEDC,MAFC,EAEOC,UAFP,EAEmBC,IAFnB,EAEyB;IAC5B,IAAIC,QAAU,EAAd;IACA,IAAIC,UAAU,EAAd;IACA,IAAIL,QAAU,KAAd;IAEA,IAAIM,OAAU,CAAd;IACA,IAAIC,QAAU,KAAd;IACA,IAAIC,SAAU,KAAd;;IAEA,KAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIR,OAAOS,MAA5B,EAAoCD,GAApC,EAA0C;MACtC,IAAIE,SAASV,OAAOQ,CAAPR,CAAb;;MAEA,IAAKM,KAAL,EAAa;QACT,IAAKC,MAAL,EAAc;UACVA,SAAS,KAATA;QADJ,OAEO,IAAKG,WAAW,IAAhB,EAAuB;UAC1BH,SAAS,IAATA;QADG,OAEA,IAAKG,WAAWJ,KAAhB,EAAwB;UAC3BA,QAAQ,KAARA;QACH;MAPL,OAQO,IAAKI,WAAW,GAAXA,IAAkBA,WAAW,IAAlC,EAAyC;QAC5CJ,QAAQI,MAARJ;MADG,OAEA,IAAKI,WAAW,GAAhB,EAAsB;QACzBL,QAAQ,CAARA;MADG,OAEA,IAAKK,WAAW,GAAhB,EAAsB;QACzB,IAAKL,OAAO,CAAZ,EAAgBA,QAAQ,CAARA;MADb,OAEA,IAAKA,SAAS,CAAd,EAAkB;QACrB,IAAKJ,WAAWU,OAAXV,CAAmBS,MAAnBT,MAA+B,CAAC,CAArC,EAAyCF,QAAQ,IAARA;MAC5C;;MAED,IAAKA,KAAL,EAAa;QACT,IAAKK,YAAY,EAAjB,EAAsBD,MAAMS,IAANT,CAAWC,QAAQS,IAART,EAAXD;QACtBC,UAAU,EAAVA;QACAL,QAAU,KAAVA;MAHJ,OAIO;QACHK,WAAWM,MAAXN;MACH;IACJ;;IAED,IAAKF,QAAQE,YAAY,EAAzB,EAA8BD,MAAMS,IAANT,CAAWC,QAAQS,IAART,EAAXD;IAC9B,OAAOA,KAAP;EA1CG;;EA6CP;;;;;;;;;;;EAWAW,KAxDO,iBAwDDd,MAxDC,EAwDO;IACV,IAAIe,SAAS,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAb;IACA,OAAOjB,KAAKC,KAALD,CAAWE,MAAXF,EAAmBiB,MAAnBjB,CAAP;EA1DG;;EA6DP;;;;;;;;;;;;EAYAkB,KAzEO,iBAyEDhB,MAzEC,EAyEO;IACV,IAAIgB,QAAQ,GAAZ;IACA,OAAOlB,KAAKC,KAALD,CAAWE,MAAXF,EAAmB,CAACkB,KAAD,CAAnBlB,EAA4B,IAA5BA,CAAP;EACH;AA5EM,CAAX;kBAgFeA","names":["list","split","string","separators","last","array","current","func","quote","escape","i","length","letter","indexOf","push","trim","space","spaces","comma"],"sources":["list.es6"],"sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\nlet list = {\n\n    split(string, separators, last) {\n        let array   = [];\n        let current = '';\n        let split   = false;\n\n        let func    = 0;\n        let quote   = false;\n        let escape  = false;\n\n        for ( let i = 0; i < string.length; i++ ) {\n            let letter = string[i];\n\n            if ( quote ) {\n                if ( escape ) {\n                    escape = false;\n                } else if ( letter === '\\\\' ) {\n                    escape = true;\n                } else if ( letter === quote ) {\n                    quote = false;\n                }\n            } else if ( letter === '\"' || letter === '\\'' ) {\n                quote = letter;\n            } else if ( letter === '(' ) {\n                func += 1;\n            } else if ( letter === ')' ) {\n                if ( func > 0 ) func -= 1;\n            } else if ( func === 0 ) {\n                if ( separators.indexOf(letter) !== -1 ) split = true;\n            }\n\n            if ( split ) {\n                if ( current !== '' ) array.push(current.trim());\n                current = '';\n                split   = false;\n            } else {\n                current += letter;\n            }\n        }\n\n        if ( last || current !== '' ) array.push(current.trim());\n        return array;\n    },\n\n    /**\n     * Safely splits space-separated values (such as those for `background`,\n     * `border-radius`, and other shorthand properties).\n     *\n     * @param {string} string - space-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n     */\n    space(string) {\n        let spaces = [' ', '\\n', '\\t'];\n        return list.split(string, spaces);\n    },\n\n    /**\n     * Safely splits comma-separated values (such as those for `transition-*`\n     * and `background` properties).\n     *\n     * @param {string} string - comma-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.comma('black, linear-gradient(white, black)')\n     * //=> ['black', 'linear-gradient(white, black)']\n     */\n    comma(string) {\n        let comma = ',';\n        return list.split(string, [comma], true);\n    }\n\n};\n\nexport default list;\n"]},"metadata":{},"sourceType":"module"}
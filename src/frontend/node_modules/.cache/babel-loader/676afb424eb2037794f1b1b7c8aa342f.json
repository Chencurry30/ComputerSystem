{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if ( decl.important ) {\n *     decl.warn(result, 'Avoid !important', { word: '!important' });\n * }\n */\n\n\nvar Warning = function () {\n  /**\n   * @param {string} text        - warning message\n   * @param {Object} [opts]      - warning options\n   * @param {Node}   opts.node   - CSS node that caused the warning\n   * @param {string} opts.word   - word in CSS source that caused the warning\n   * @param {number} opts.index  - index in CSS node string that caused\n   *                               the warning\n   * @param {string} opts.plugin - name of the plugin that created\n   *                               this warning. {@link Result#warn} fills\n   *                               this property automatically.\n   */\n  function Warning(text) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Warning);\n    /**\n     * @member {string} - Type to filter warnings from\n     *                    {@link Result#messages}. Always equal\n     *                    to `\"warning\"`.\n     *\n     * @example\n     * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n     */\n\n\n    this.type = 'warning';\n    /**\n     * @member {string} - The warning message.\n     *\n     * @example\n     * warning.text //=> 'Try to avoid !important'\n     */\n\n    this.text = text;\n\n    if (opts.node && opts.node.source) {\n      var pos = opts.node.positionBy(opts);\n      /**\n       * @member {number} - Line in the input file\n       *                    with this warning’s source\n       *\n       * @example\n       * warning.line //=> 5\n       */\n\n      this.line = pos.line;\n      /**\n       * @member {number} - Column in the input file\n       *                    with this warning’s source.\n       *\n       * @example\n       * warning.column //=> 6\n       */\n\n      this.column = pos.column;\n    }\n\n    for (var opt in opts) {\n      this[opt] = opts[opt];\n    }\n  }\n  /**\n   * Returns a warning position and message.\n   *\n   * @example\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   *\n   * @return {string} warning position and message\n   */\n\n\n  Warning.prototype.toString = function toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message;\n    } else if (this.plugin) {\n      return this.plugin + ': ' + this.text;\n    } else {\n      return this.text;\n    }\n  };\n  /**\n   * @memberof Warning#\n   * @member {string} plugin - The name of the plugin that created\n   *                           it will fill this property automatically.\n   *                           this warning. When you call {@link Node#warn}\n   *\n   * @example\n   * warning.plugin //=> 'postcss-important'\n   */\n\n  /**\n   * @memberof Warning#\n   * @member {Node} node - Contains the CSS node that caused the warning.\n   *\n   * @example\n   * warning.node.toString() //=> 'color: white !important'\n   */\n\n\n  return Warning;\n}();\n\nexports.default = Warning;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;IAQMA,O;EAEF;;;;;;;;;;;EAWA,iBAAYC,IAAZ,EAA8B;IAAA,IAAZC,IAAY,uEAAL,EAAK;;IAAAC;IAC1B;;;;;;;;;;IAQA,KAAKC,IAAL,GAAY,SAAZ;IACA;;;;;;;IAMA,KAAKH,IAAL,GAAYA,IAAZ;;IAEA,IAAKC,KAAKG,IAALH,IAAaA,KAAKG,IAALH,CAAUI,MAA5B,EAAqC;MACjC,IAAIC,MAAUL,KAAKG,IAALH,CAAUM,UAAVN,CAAqBA,IAArBA,CAAd;MACA;;;;;;;;MAOA,KAAKO,IAAL,GAAcF,IAAIE,IAAlB;MACA;;;;;;;;MAOA,KAAKC,MAAL,GAAcH,IAAIG,MAAlB;IACH;;IAED,KAAM,IAAIC,GAAV,IAAiBT,IAAjB;MAAwB,KAAKS,GAAL,IAAYT,KAAKS,GAALT,CAAZ;IAAxB;EACH;EAED;;;;;;;;;;oBAQAU,W,oBAAW;IACP,IAAK,KAAKP,IAAV,EAAiB;MACb,OAAO,KAAKA,IAAL,CAAUQ,KAAV,CAAgB,KAAKZ,IAArB,EAA2B;QAC9Ba,QAAQ,KAAKA,MADiB;QAE9BC,OAAQ,KAAKA,KAFiB;QAG9BC,MAAQ,KAAKA;MAHiB,CAA3B,EAIJC,OAJH;IADJ,OAMO,IAAK,KAAKH,MAAV,EAAmB;MACtB,OAAO,KAAKA,MAAL,GAAc,IAAd,GAAqB,KAAKb,IAAjC;IADG,OAEA;MACH,OAAO,KAAKA,IAAZ;IACH;;EAGL;;;;;;;;;;EAUA;;;;;;;;;;;;kBAUWD","names":["Warning","text","opts","_classCallCheck","type","node","source","pos","positionBy","line","column","opt","toString","error","plugin","index","word","message"],"sources":["warning.es6"],"sourcesContent":["/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if ( decl.important ) {\n *     decl.warn(result, 'Avoid !important', { word: '!important' });\n * }\n */\nclass Warning {\n\n    /**\n     * @param {string} text        - warning message\n     * @param {Object} [opts]      - warning options\n     * @param {Node}   opts.node   - CSS node that caused the warning\n     * @param {string} opts.word   - word in CSS source that caused the warning\n     * @param {number} opts.index  - index in CSS node string that caused\n     *                               the warning\n     * @param {string} opts.plugin - name of the plugin that created\n     *                               this warning. {@link Result#warn} fills\n     *                               this property automatically.\n     */\n    constructor(text, opts = { }) {\n        /**\n         * @member {string} - Type to filter warnings from\n         *                    {@link Result#messages}. Always equal\n         *                    to `\"warning\"`.\n         *\n         * @example\n         * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n         */\n        this.type = 'warning';\n        /**\n         * @member {string} - The warning message.\n         *\n         * @example\n         * warning.text //=> 'Try to avoid !important'\n         */\n        this.text = text;\n\n        if ( opts.node && opts.node.source ) {\n            let pos     = opts.node.positionBy(opts);\n            /**\n             * @member {number} - Line in the input file\n             *                    with this warning’s source\n             *\n             * @example\n             * warning.line //=> 5\n             */\n            this.line   = pos.line;\n            /**\n             * @member {number} - Column in the input file\n             *                    with this warning’s source.\n             *\n             * @example\n             * warning.column //=> 6\n             */\n            this.column = pos.column;\n        }\n\n        for ( let opt in opts ) this[opt] = opts[opt];\n    }\n\n    /**\n     * Returns a warning position and message.\n     *\n     * @example\n     * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n     *\n     * @return {string} warning position and message\n     */\n    toString() {\n        if ( this.node ) {\n            return this.node.error(this.text, {\n                plugin: this.plugin,\n                index:  this.index,\n                word:   this.word\n            }).message;\n        } else if ( this.plugin ) {\n            return this.plugin + ': ' + this.text;\n        } else {\n            return this.text;\n        }\n    }\n\n    /**\n     * @memberof Warning#\n     * @member {string} plugin - The name of the plugin that created\n     *                           it will fill this property automatically.\n     *                           this warning. When you call {@link Node#warn}\n     *\n     * @example\n     * warning.plugin //=> 'postcss-important'\n     */\n\n    /**\n     * @memberof Warning#\n     * @member {Node} node - Contains the CSS node that caused the warning.\n     *\n     * @example\n     * warning.node.toString() //=> 'color: white !important'\n     */\n\n}\n\nexport default Warning;\n"]},"metadata":{},"sourceType":"module"}
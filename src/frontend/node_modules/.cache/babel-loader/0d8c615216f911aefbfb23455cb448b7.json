{"ast":null,"code":"//封装的相关函数\nimport { CryAlgorithm, createUUID } from '../encryption/index'; //封装获取公钥的相关路由\n\nimport { getPublicKey } from '../Servers/encryption';\nconst encryption = {\n  namespaced: true,\n  //开启匿名空间\n  state: {\n    Algorithm: {\n      uuid: '',\n      //公钥的id\n      encryPtion: '' //公钥的信息\n\n    }\n  },\n  actions: {\n    getPubKey(context) {\n      let UUID = {\n        uuId: createUUID()\n      };\n      getPublicKey(UUID).then(res => {\n        console.log(123123123);\n        console.log(res);\n\n        if (res.data.code === 200) {\n          UUID.encryPtion = res.data.data;\n          context.commit('GETPUBKEY', UUID);\n        }\n      });\n    }\n\n  },\n  mutations: {\n    GETPUBKEY(state, data) {\n      state.Algorithm = data;\n    }\n\n  },\n  //返回获得的公钥以及公钥的键值对 \n  getters: {\n    getkeyInfo(state) {\n      return state.Algorithm;\n    }\n\n  }\n};\nexport default encryption;","map":{"version":3,"names":["CryAlgorithm","createUUID","getPublicKey","encryption","namespaced","state","Algorithm","uuid","encryPtion","actions","getPubKey","context","UUID","uuId","then","res","console","log","data","code","commit","mutations","GETPUBKEY","getters","getkeyInfo"],"sources":["C:/Users/Administrator/Desktop/code/computer-system/src/frontend/src/store/encryption.js"],"sourcesContent":["//封装的相关函数\r\nimport {CryAlgorithm,createUUID} from '../encryption/index'\r\n//封装获取公钥的相关路由\r\nimport {getPublicKey} from '../Servers/encryption' \r\nconst encryption = {\r\n    namespaced:true,   //开启匿名空间\r\n    state:{\r\n      Algorithm:{\r\n        uuid:'',          //公钥的id\r\n        encryPtion:'',    //公钥的信息\r\n      }\r\n    },\r\n    actions:{\r\n      getPubKey(context){\r\n        let UUID = {\r\n          uuId:createUUID()\r\n        }\r\n        getPublicKey(UUID).then((res)=>{\r\n          console.log(123123123);\r\n          console.log(res);\r\n          if(res.data.code === 200){\r\n            UUID.encryPtion = res.data.data\r\n            context.commit('GETPUBKEY',UUID)\r\n          }\r\n        })\r\n      }\r\n\r\n    },\r\n    mutations:{\r\n      GETPUBKEY(state,data){\r\n        state.Algorithm = data\r\n      }\r\n    },\r\n    //返回获得的公钥以及公钥的键值对 \r\n    getters:{\r\n      getkeyInfo(state){\r\n        return state.Algorithm\r\n      }\r\n    }\r\n}\r\n\r\n\r\nexport default encryption"],"mappings":"AAAA;AACA,SAAQA,YAAR,EAAqBC,UAArB,QAAsC,qBAAtC,C,CACA;;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AACA,MAAMC,UAAU,GAAG;EACfC,UAAU,EAAC,IADI;EACI;EACnBC,KAAK,EAAC;IACJC,SAAS,EAAC;MACRC,IAAI,EAAC,EADG;MACU;MAClBC,UAAU,EAAC,EAFH,CAEU;;IAFV;EADN,CAFS;EAQfC,OAAO,EAAC;IACNC,SAAS,CAACC,OAAD,EAAS;MAChB,IAAIC,IAAI,GAAG;QACTC,IAAI,EAACZ,UAAU;MADN,CAAX;MAGAC,YAAY,CAACU,IAAD,CAAZ,CAAmBE,IAAnB,CAAyBC,GAAD,IAAO;QAC7BC,OAAO,CAACC,GAAR,CAAY,SAAZ;QACAD,OAAO,CAACC,GAAR,CAAYF,GAAZ;;QACA,IAAGA,GAAG,CAACG,IAAJ,CAASC,IAAT,KAAkB,GAArB,EAAyB;UACvBP,IAAI,CAACJ,UAAL,GAAkBO,GAAG,CAACG,IAAJ,CAASA,IAA3B;UACAP,OAAO,CAACS,MAAR,CAAe,WAAf,EAA2BR,IAA3B;QACD;MACF,CAPD;IAQD;;EAbK,CARO;EAwBfS,SAAS,EAAC;IACRC,SAAS,CAACjB,KAAD,EAAOa,IAAP,EAAY;MACnBb,KAAK,CAACC,SAAN,GAAkBY,IAAlB;IACD;;EAHO,CAxBK;EA6Bf;EACAK,OAAO,EAAC;IACNC,UAAU,CAACnB,KAAD,EAAO;MACf,OAAOA,KAAK,CAACC,SAAb;IACD;;EAHK;AA9BO,CAAnB;AAsCA,eAAeH,UAAf"},"metadata":{},"sourceType":"module"}
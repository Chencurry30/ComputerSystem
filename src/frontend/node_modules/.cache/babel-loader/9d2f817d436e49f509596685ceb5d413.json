{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _supportsColor = require('supports-color');\n\nvar _supportsColor2 = _interopRequireDefault(_supportsColor);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _terminalHighlight = require('./terminal-highlight');\n\nvar _terminalHighlight2 = _interopRequireDefault(_terminalHighlight);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if ( error.name === 'CssSyntaxError' ) {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' });\n */\n\n\nvar CssSyntaxError = function () {\n  /**\n   * @param {string} message  - error message\n   * @param {number} [line]   - source line of the error\n   * @param {number} [column] - source column of the error\n   * @param {string} [source] - source code of the broken file\n   * @param {string} [file]   - absolute path to the broken file\n   * @param {string} [plugin] - PostCSS plugin name, if error came from plugin\n   */\n  function CssSyntaxError(message, line, column, source, file, plugin) {\n    _classCallCheck(this, CssSyntaxError);\n    /**\n     * @member {string} - Always equal to `'CssSyntaxError'`. You should\n     *                    always check error type\n     *                    by `error.name === 'CssSyntaxError'` instead of\n     *                    `error instanceof CssSyntaxError`, because\n     *                    npm could have several PostCSS versions.\n     *\n     * @example\n     * if ( error.name === 'CssSyntaxError' ) {\n     *   error //=> CssSyntaxError\n     * }\n     */\n\n\n    this.name = 'CssSyntaxError';\n    /**\n     * @member {string} - Error message.\n     *\n     * @example\n     * error.message //=> 'Unclosed block'\n     */\n\n    this.reason = message;\n\n    if (file) {\n      /**\n       * @member {string} - Absolute path to the broken file.\n       *\n       * @example\n       * error.file       //=> 'a.sass'\n       * error.input.file //=> 'a.css'\n       */\n      this.file = file;\n    }\n\n    if (source) {\n      /**\n       * @member {string} - Source code of the broken file.\n       *\n       * @example\n       * error.source       //=> 'a { b {} }'\n       * error.input.column //=> 'a b { }'\n       */\n      this.source = source;\n    }\n\n    if (plugin) {\n      /**\n       * @member {string} - Plugin name, if error came from plugin.\n       *\n       * @example\n       * error.plugin //=> 'postcss-vars'\n       */\n      this.plugin = plugin;\n    }\n\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      /**\n       * @member {number} - Source line of the error.\n       *\n       * @example\n       * error.line       //=> 2\n       * error.input.line //=> 4\n       */\n      this.line = line;\n      /**\n       * @member {number} - Source column of the error.\n       *\n       * @example\n       * error.column       //=> 1\n       * error.input.column //=> 4\n       */\n\n      this.column = column;\n    }\n\n    this.setMessage();\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError);\n    }\n  }\n\n  CssSyntaxError.prototype.setMessage = function setMessage() {\n    /**\n     * @member {string} - Full error text in the GNU error format\n     *                    with plugin, file, line and column.\n     *\n     * @example\n     * error.message //=> 'a.css:1:1: Unclosed block'\n     */\n    this.message = this.plugin ? this.plugin + ': ' : '';\n    this.message += this.file ? this.file : '<css input>';\n\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column;\n    }\n\n    this.message += ': ' + this.reason;\n  };\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * @param {boolean} [color] whether arrow will be colored red by terminal\n   *                          color codes. By default, PostCSS will detect\n   *                          color support by `process.stdout.isTTY`\n   *                          and `process.env.NODE_DISABLE_COLORS`.\n   *\n   * @example\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   *\n   * @return {string} few lines of CSS source that caused the error\n   */\n\n\n  CssSyntaxError.prototype.showSourceCode = function showSourceCode(color) {\n    var _this = this;\n\n    if (!this.source) return '';\n    var css = this.source;\n    if (typeof color === 'undefined') color = _supportsColor2.default.stdout;\n    if (color) css = (0, _terminalHighlight2.default)(css);\n    var lines = css.split(/\\r?\\n/);\n    var start = Math.max(this.line - 3, 0);\n    var end = Math.min(this.line + 2, lines.length);\n    var maxWidth = String(end).length;\n\n    function mark(text) {\n      if (color && _chalk2.default.red) {\n        return _chalk2.default.red.bold(text);\n      } else {\n        return text;\n      }\n    }\n\n    function aside(text) {\n      if (color && _chalk2.default.gray) {\n        return _chalk2.default.gray(text);\n      } else {\n        return text;\n      }\n    }\n\n    return lines.slice(start, end).map(function (line, index) {\n      var number = start + 1 + index;\n      var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n\n      if (number === _this.line) {\n        var spacing = aside(gutter.replace(/\\d/g, ' ')) + line.slice(0, _this.column - 1).replace(/[^\\t]/g, ' ');\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^');\n      } else {\n        return ' ' + aside(gutter) + line;\n      }\n    }).join('\\n');\n  };\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * @example\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   *\n   * @return {string} error position, message and source code\n   */\n\n\n  CssSyntaxError.prototype.toString = function toString() {\n    var code = this.showSourceCode();\n\n    if (code) {\n      code = '\\n\\n' + code + '\\n';\n    }\n\n    return this.name + ': ' + this.message + code;\n  };\n  /**\n   * @memberof CssSyntaxError#\n   * @member {Input} input - Input object with PostCSS internal information\n   *                         about input file. If input has source map\n   *                         from previous tool, PostCSS will use origin\n   *                         (for example, Sass) source. You can use this\n   *                         object to get PostCSS input source.\n   *\n   * @example\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   */\n\n\n  return CssSyntaxError;\n}();\n\nexports.default = CssSyntaxError;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["CssSyntaxError","message","line","column","source","file","plugin","_classCallCheck","name","reason","setMessage","Error","captureStackTrace","showSourceCode","color","css","supportsColor","stdout","lines","split","start","Math","max","end","min","length","maxWidth","String","mark","text","chalk","red","bold","aside","gray","slice","map","index","number","gutter","_this","spacing","replace","join","toString","code"],"sources":["css-syntax-error.es6"],"sourcesContent":["import supportsColor from 'supports-color';\nimport chalk         from 'chalk';\n\nimport terminalHighlight from './terminal-highlight';\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if ( error.name === 'CssSyntaxError' ) {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' });\n */\nclass CssSyntaxError {\n\n    /**\n     * @param {string} message  - error message\n     * @param {number} [line]   - source line of the error\n     * @param {number} [column] - source column of the error\n     * @param {string} [source] - source code of the broken file\n     * @param {string} [file]   - absolute path to the broken file\n     * @param {string} [plugin] - PostCSS plugin name, if error came from plugin\n     */\n    constructor(message, line, column, source, file, plugin) {\n        /**\n         * @member {string} - Always equal to `'CssSyntaxError'`. You should\n         *                    always check error type\n         *                    by `error.name === 'CssSyntaxError'` instead of\n         *                    `error instanceof CssSyntaxError`, because\n         *                    npm could have several PostCSS versions.\n         *\n         * @example\n         * if ( error.name === 'CssSyntaxError' ) {\n         *   error //=> CssSyntaxError\n         * }\n         */\n        this.name = 'CssSyntaxError';\n        /**\n         * @member {string} - Error message.\n         *\n         * @example\n         * error.message //=> 'Unclosed block'\n         */\n        this.reason = message;\n\n        if ( file ) {\n            /**\n             * @member {string} - Absolute path to the broken file.\n             *\n             * @example\n             * error.file       //=> 'a.sass'\n             * error.input.file //=> 'a.css'\n             */\n            this.file = file;\n        }\n        if ( source ) {\n            /**\n             * @member {string} - Source code of the broken file.\n             *\n             * @example\n             * error.source       //=> 'a { b {} }'\n             * error.input.column //=> 'a b { }'\n             */\n            this.source = source;\n        }\n        if ( plugin ) {\n            /**\n             * @member {string} - Plugin name, if error came from plugin.\n             *\n             * @example\n             * error.plugin //=> 'postcss-vars'\n             */\n            this.plugin = plugin;\n        }\n        if ( typeof line !== 'undefined' && typeof column !== 'undefined' ) {\n            /**\n             * @member {number} - Source line of the error.\n             *\n             * @example\n             * error.line       //=> 2\n             * error.input.line //=> 4\n             */\n            this.line   = line;\n            /**\n             * @member {number} - Source column of the error.\n             *\n             * @example\n             * error.column       //=> 1\n             * error.input.column //=> 4\n             */\n            this.column = column;\n        }\n\n        this.setMessage();\n\n        if ( Error.captureStackTrace ) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n\n    setMessage() {\n        /**\n         * @member {string} - Full error text in the GNU error format\n         *                    with plugin, file, line and column.\n         *\n         * @example\n         * error.message //=> 'a.css:1:1: Unclosed block'\n         */\n        this.message  = this.plugin ? this.plugin + ': ' : '';\n        this.message += this.file ? this.file : '<css input>';\n        if ( typeof this.line !== 'undefined' ) {\n            this.message += ':' + this.line + ':' + this.column;\n        }\n        this.message += ': ' + this.reason;\n    }\n\n    /**\n     * Returns a few lines of CSS source that caused the error.\n     *\n     * If the CSS has an input source map without `sourceContent`,\n     * this method will return an empty string.\n     *\n     * @param {boolean} [color] whether arrow will be colored red by terminal\n     *                          color codes. By default, PostCSS will detect\n     *                          color support by `process.stdout.isTTY`\n     *                          and `process.env.NODE_DISABLE_COLORS`.\n     *\n     * @example\n     * error.showSourceCode() //=> \"  4 | }\n     *                        //      5 | a {\n     *                        //    > 6 |   bad\n     *                        //        |   ^\n     *                        //      7 | }\n     *                        //      8 | b {\"\n     *\n     * @return {string} few lines of CSS source that caused the error\n     */\n    showSourceCode(color) {\n        if ( !this.source ) return '';\n\n        let css = this.source;\n        if ( typeof color === 'undefined' ) color = supportsColor.stdout;\n        if ( color ) css = terminalHighlight(css);\n\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end   = Math.min(this.line + 2, lines.length);\n\n        let maxWidth = String(end).length;\n\n        function mark(text) {\n            if ( color && chalk.red ) {\n                return chalk.red.bold(text);\n            } else {\n                return text;\n            }\n        }\n        function aside(text) {\n            if ( color && chalk.gray ) {\n                return chalk.gray(text);\n            } else {\n                return text;\n            }\n        }\n\n        return lines.slice(start, end).map( (line, index) => {\n            let number = start + 1 + index;\n            let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n            if ( number === this.line ) {\n                let spacing =\n                    aside(gutter.replace(/\\d/g, ' ')) +\n                    line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ');\n                return mark('>') + aside(gutter) + line + '\\n ' +\n                       spacing + mark('^');\n            } else {\n                return ' ' + aside(gutter) + line;\n            }\n        }).join('\\n');\n    }\n\n    /**\n     * Returns error position, message and source code of the broken part.\n     *\n     * @example\n     * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n     *                  //    > 1 | a {\n     *                  //        | ^\"\n     *\n     * @return {string} error position, message and source code\n     */\n    toString() {\n        let code = this.showSourceCode();\n        if ( code ) {\n            code = '\\n\\n' + code + '\\n';\n        }\n        return this.name + ': ' + this.message + code;\n    }\n\n    /**\n     * @memberof CssSyntaxError#\n     * @member {Input} input - Input object with PostCSS internal information\n     *                         about input file. If input has source map\n     *                         from previous tool, PostCSS will use origin\n     *                         (for example, Sass) source. You can use this\n     *                         object to get PostCSS input source.\n     *\n     * @example\n     * error.input.file //=> 'a.css'\n     * error.file       //=> 'a.sass'\n     */\n\n}\n\nexport default CssSyntaxError;\n"]},"metadata":{},"sourceType":"module"}
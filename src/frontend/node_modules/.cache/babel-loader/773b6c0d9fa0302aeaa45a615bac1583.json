{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _tokenize = require('./tokenize');\n\nvar _tokenize2 = _interopRequireDefault(_tokenize);\n\nvar _input = require('./input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HIGHLIGHT_THEME = {\n  'brackets': _chalk2.default.cyan,\n  'at-word': _chalk2.default.cyan,\n  'call': _chalk2.default.cyan,\n  'comment': _chalk2.default.gray,\n  'string': _chalk2.default.green,\n  'class': _chalk2.default.yellow,\n  'hash': _chalk2.default.magenta,\n  '(': _chalk2.default.cyan,\n  ')': _chalk2.default.cyan,\n  '{': _chalk2.default.yellow,\n  '}': _chalk2.default.yellow,\n  '[': _chalk2.default.yellow,\n  ']': _chalk2.default.yellow,\n  ':': _chalk2.default.yellow,\n  ';': _chalk2.default.yellow\n};\n\nfunction getTokenType(_ref, processor) {\n  var type = _ref[0],\n      value = _ref[1];\n\n  if (type === 'word') {\n    if (value[0] === '.') {\n      return 'class';\n    }\n\n    if (value[0] === '#') {\n      return 'hash';\n    }\n  }\n\n  if (!processor.endOfFile()) {\n    var next = processor.nextToken();\n    processor.back(next);\n    if (next[0] === 'brackets' || next[0] === '(') return 'call';\n  }\n\n  return type;\n}\n\nfunction terminalHighlight(css) {\n  var processor = (0, _tokenize2.default)(new _input2.default(css), {\n    ignoreErrors: true\n  });\n  var result = '';\n\n  var _loop = function _loop() {\n    var token = processor.nextToken();\n    var color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n\n    if (color) {\n      result += token[1].split(/\\r?\\n/).map(function (i) {\n        return color(i);\n      }).join('\\n');\n    } else {\n      result += token[1];\n    }\n  };\n\n  while (!processor.endOfFile()) {\n    _loop();\n  }\n\n  return result;\n}\n\nexports.default = terminalHighlight;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;AAAA;;;;AAEA;;;;AACA;;;;;;;;;;AAEA,IAAMA,kBAAkB;EACpB,YAAYC,gBAAMC,IADE;EAEpB,WAAYD,gBAAMC,IAFE;EAGpB,QAAYD,gBAAMC,IAHE;EAIpB,WAAYD,gBAAME,IAJE;EAKpB,UAAYF,gBAAMG,KALE;EAMpB,SAAYH,gBAAMI,MANE;EAOpB,QAAYJ,gBAAMK,OAPE;EAQpB,KAAYL,gBAAMC,IARE;EASpB,KAAYD,gBAAMC,IATE;EAUpB,KAAYD,gBAAMI,MAVE;EAWpB,KAAYJ,gBAAMI,MAXE;EAYpB,KAAYJ,gBAAMI,MAZE;EAapB,KAAYJ,gBAAMI,MAbE;EAcpB,KAAYJ,gBAAMI,MAdE;EAepB,KAAYJ,gBAAMI;AAfE,CAAxB;;AAkBA,SAASE,YAAT,OAAqCC,SAArC,EAAgD;EAAA,IAAzBC,IAAyB;EAAA,IAAnBC,KAAmB;;EAC5C,IAAKD,SAAS,MAAd,EAAuB;IACnB,IAAKC,MAAM,CAANA,MAAa,GAAlB,EAAwB;MACpB,OAAO,OAAP;IACH;;IACD,IAAKA,MAAM,CAANA,MAAa,GAAlB,EAAwB;MACpB,OAAO,MAAP;IACH;EACJ;;EAED,IAAK,CAACF,UAAUG,SAAVH,EAAN,EAA8B;IAC1B,IAAII,OAAOJ,UAAUK,SAAVL,EAAX;IACAA,UAAUM,IAAVN,CAAeI,IAAfJ;IACA,IAAKI,KAAK,CAALA,MAAY,UAAZA,IAA0BA,KAAK,CAALA,MAAY,GAA3C,EAAiD,OAAO,MAAP;EACpD;;EAED,OAAOH,IAAP;AACH;;AAED,SAASM,iBAAT,CAA2BC,GAA3B,EAAgC;EAC5B,IAAIR,YAAY,wBAAU,IAAIS,eAAJ,CAAUD,GAAV,CAAV,EAA0B;IAAEE,cAAc;EAAhB,CAA1B,CAAhB;EACA,IAAIC,SAAS,EAAb;;EAF4B;IAIxB,IAAIC,QAAQZ,UAAUK,SAAVL,EAAZ;IACA,IAAIa,QAAQrB,gBAAgBO,aAAaa,KAAbb,EAAoBC,SAApBD,CAAhBP,CAAZ;;IACA,IAAKqB,KAAL,EAAa;MACTF,UAAUC,MAAM,CAANA,EAASE,KAATF,CAAe,OAAfA,EACLG,GADKH,CACA;QAAA,OAAKC,MAAMG,CAANH,CAAL;MADA,GAELI,IAFKL,CAEA,IAFAA,CAAVD;IADJ,OAIO;MACHA,UAAUC,MAAM,CAANA,CAAVD;IACH;EAZuB;;EAG5B,OAAQ,CAACX,UAAUG,SAAVH,EAAT,EAAiC;IAAAkB;EAUhC;;EACD,OAAOP,MAAP;AACH;;kBAEcJ","names":["HIGHLIGHT_THEME","chalk","cyan","gray","green","yellow","magenta","getTokenType","processor","type","value","endOfFile","next","nextToken","back","terminalHighlight","css","Input","ignoreErrors","result","token","color","split","map","i","join","_loop"],"sources":["terminal-highlight.es6"],"sourcesContent":["import chalk from 'chalk';\n\nimport tokenizer from './tokenize';\nimport Input    from './input';\n\nconst HIGHLIGHT_THEME = {\n    'brackets': chalk.cyan,\n    'at-word':  chalk.cyan,\n    'call':     chalk.cyan,\n    'comment':  chalk.gray,\n    'string':   chalk.green,\n    'class':    chalk.yellow,\n    'hash':     chalk.magenta,\n    '(':        chalk.cyan,\n    ')':        chalk.cyan,\n    '{':        chalk.yellow,\n    '}':        chalk.yellow,\n    '[':        chalk.yellow,\n    ']':        chalk.yellow,\n    ':':        chalk.yellow,\n    ';':        chalk.yellow\n};\n\nfunction getTokenType([type, value], processor) {\n    if ( type === 'word' ) {\n        if ( value[0] === '.' ) {\n            return 'class';\n        }\n        if ( value[0] === '#' ) {\n            return 'hash';\n        }\n    }\n\n    if ( !processor.endOfFile() ) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if ( next[0] === 'brackets' || next[0] === '(' ) return 'call';\n    }\n\n    return type;\n}\n\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), { ignoreErrors: true });\n    let result = '';\n    while ( !processor.endOfFile() ) {\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if ( color ) {\n            result += token[1].split(/\\r?\\n/)\n                .map( i => color(i) )\n                .join('\\n');\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\n\nexport default terminalHighlight;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _sourceMap = require('source-map');\n\nvar _sourceMap2 = _interopRequireDefault(_sourceMap);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    if (Buffer.from && Buffer.from !== Uint8Array.from) {\n      return Buffer.from(str, 'base64').toString();\n    } else {\n      return new Buffer(str, 'base64').toString();\n    }\n  } else {\n    return window.atob(str);\n  }\n}\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\n\n\nvar PreviousMap = function () {\n  /**\n   * @param {string}         css    - input CSS source\n   * @param {processOptions} [opts] - {@link Processor#process} options\n   */\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n\n    this.loadAnnotation(css);\n    /**\n     * @member {boolean} - Was source map inlined by data-uri to input CSS.\n     */\n\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} object with source map information\n   */\n\n\n  PreviousMap.prototype.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap2.default.SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  };\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present\n   */\n\n\n  PreviousMap.prototype.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n\n  PreviousMap.prototype.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n\n  PreviousMap.prototype.loadAnnotation = function loadAnnotation(css) {\n    var match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n    if (match) this.annotation = match[1].trim();\n  };\n\n  PreviousMap.prototype.decodeInline = function decodeInline(text) {\n    // data:application/json;charset=utf-8;base64,\n    // data:application/json;charset=utf8;base64,\n    // data:application/json;base64,\n    var baseUri = /^data:application\\/json;(?:charset=utf-?8;)?base64,/;\n    var uri = 'data:application/json,';\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    } else if (baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length));\n    } else {\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  };\n\n  PreviousMap.prototype.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n\n        if (prevPath && _fs2.default.existsSync && _fs2.default.existsSync(prevPath)) {\n          return _fs2.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap2.default.SourceMapConsumer) {\n        return _sourceMap2.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap2.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path2.default.join(_path2.default.dirname(file), map);\n      this.root = _path2.default.dirname(map);\n\n      if (_fs2.default.existsSync && _fs2.default.existsSync(map)) {\n        return _fs2.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n\n  PreviousMap.prototype.isMap = function isMap(map) {\n    if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n\n  return PreviousMap;\n}();\n\nexports.default = PreviousMap;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["fromBase64","str","Buffer","from","Uint8Array","toString","window","atob","PreviousMap","css","opts","_classCallCheck","loadAnnotation","inline","startWith","annotation","prev","map","undefined","text","loadMap","consumer","consumerCache","mozilla","SourceMapConsumer","withContent","sourcesContent","length","string","start","substr","match","trim","decodeInline","baseUri","uri","decodeURIComponent","test","RegExp","lastMatch","encoding","Error","file","prevPath","fs","existsSync","readFileSync","SourceMapGenerator","fromSourceMap","isMap","JSON","stringify","path","join","dirname","root","mappings","_mappings"],"sources":["previous-map.es6"],"sourcesContent":["import mozilla  from 'source-map';\nimport path     from 'path';\nimport fs       from 'fs';\n\nfunction fromBase64(str) {\n    if ( Buffer ) {\n        if ( Buffer.from && Buffer.from !== Uint8Array.from ) {\n            return Buffer.from(str, 'base64').toString();\n        } else {\n            return new Buffer(str, 'base64').toString();\n        }\n    } else {\n        return window.atob(str);\n    }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n\n    /**\n     * @param {string}         css    - input CSS source\n     * @param {processOptions} [opts] - {@link Processor#process} options\n     */\n    constructor(css, opts) {\n        this.loadAnnotation(css);\n        /**\n         * @member {boolean} - Was source map inlined by data-uri to input CSS.\n         */\n        this.inline = this.startWith(this.annotation, 'data:');\n\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if ( text ) this.text = text;\n    }\n\n    /**\n     * Create a instance of `SourceMapGenerator` class\n     * from the `source-map` library to work with source map information.\n     *\n     * It is lazy method, so it will create object only on first call\n     * and then it will use cache.\n     *\n     * @return {SourceMapGenerator} object with source map information\n     */\n    consumer() {\n        if ( !this.consumerCache ) {\n            this.consumerCache = new mozilla.SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n\n    /**\n     * Does source map contains `sourcesContent` with input source text.\n     *\n     * @return {boolean} Is `sourcesContent` present\n     */\n    withContent() {\n        return !!(this.consumer().sourcesContent &&\n                  this.consumer().sourcesContent.length > 0);\n    }\n\n    startWith(string, start) {\n        if ( !string ) return false;\n        return string.substr(0, start.length) === start;\n    }\n\n    loadAnnotation(css) {\n        let match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n        if ( match ) this.annotation = match[1].trim();\n    }\n\n    decodeInline(text) {\n        // data:application/json;charset=utf-8;base64,\n        // data:application/json;charset=utf8;base64,\n        // data:application/json;base64,\n        let baseUri = /^data:application\\/json;(?:charset=utf-?8;)?base64,/;\n        let uri     = 'data:application/json,';\n\n        if ( this.startWith(text, uri) ) {\n            return decodeURIComponent( text.substr(uri.length) );\n\n        } else if ( baseUri.test(text) ) {\n            return fromBase64(text.substr(RegExp.lastMatch.length));\n\n        } else {\n            let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n            throw new Error('Unsupported source map encoding ' + encoding);\n        }\n    }\n\n    loadMap(file, prev) {\n        if ( prev === false ) return false;\n\n        if ( prev ) {\n            if ( typeof prev === 'string' ) {\n                return prev;\n            } else if ( typeof prev === 'function' ) {\n                let prevPath = prev(file);\n                if ( prevPath && fs.existsSync && fs.existsSync(prevPath) ) {\n                    return fs.readFileSync(prevPath, 'utf-8').toString().trim();\n                } else {\n                    throw new Error('Unable to load previous source map: ' +\n                    prevPath.toString());\n                }\n            } else if ( prev instanceof mozilla.SourceMapConsumer ) {\n                return mozilla.SourceMapGenerator\n                    .fromSourceMap(prev).toString();\n            } else if ( prev instanceof mozilla.SourceMapGenerator ) {\n                return prev.toString();\n            } else if ( this.isMap(prev) ) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error('Unsupported previous source map format: ' +\n                    prev.toString());\n            }\n\n        } else if ( this.inline ) {\n            return this.decodeInline(this.annotation);\n\n        } else if ( this.annotation ) {\n            let map = this.annotation;\n            if ( file ) map = path.join(path.dirname(file), map);\n\n            this.root = path.dirname(map);\n            if ( fs.existsSync && fs.existsSync(map) ) {\n                return fs.readFileSync(map, 'utf-8').toString().trim();\n            } else {\n                return false;\n            }\n        }\n    }\n\n    isMap(map) {\n        if ( typeof map !== 'object' ) return false;\n        return typeof map.mappings === 'string' ||\n               typeof map._mappings === 'string';\n    }\n}\n\nexport default PreviousMap;\n"]},"metadata":{},"sourceType":"module"}
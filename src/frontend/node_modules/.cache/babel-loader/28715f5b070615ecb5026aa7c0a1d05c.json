{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar last = function last(array) {\n  return array[array.length - 1];\n};\n\nvar brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    for (var i = 0; i < str.length; i++) {\n      var sym = str[i];\n\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object') {\n        result += '(' + brackets.stringify(i) + ')';\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","last","array","length","brackets","parse","str","current","stack","i","sym","push","pop","stringify","ast","result","_iterator","_isArray","Array","isArray","_i","_ref","next","done","value","module","exports"],"sources":["C:/Users/Administrator/Desktop/code/computer-system/src/frontend/node_modules/autoprefixer/lib/brackets.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar last = function last(array) {\n    return array[array.length - 1];\n};\n\nvar brackets = {\n\n    /**\n     * Parse string to nodes tree\n     */\n    parse: function parse(str) {\n        var current = [''];\n        var stack = [current];\n\n        for (var i = 0; i < str.length; i++) {\n            var sym = str[i];\n            if (sym === '(') {\n                current = [''];\n                last(stack).push(current);\n                stack.push(current);\n                continue;\n            }\n\n            if (sym === ')') {\n                stack.pop();\n                current = last(stack);\n                current.push('');\n                continue;\n            }\n\n            current[current.length - 1] += sym;\n        }\n\n        return stack[0];\n    },\n\n\n    /**\n     * Generate output string by nodes tree\n     */\n    stringify: function stringify(ast) {\n        var result = '';\n        for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n            }\n\n            var i = _ref;\n\n            if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object') {\n                result += '(' + brackets.stringify(i) + ')';\n                continue;\n            }\n\n            result += i;\n        }\n        return result;\n    }\n};\n\nmodule.exports = brackets;"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;EAAE,OAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;EAAE,OAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;;AAEA,IAAIG,IAAI,GAAG,SAASA,IAAT,CAAcC,KAAd,EAAqB;EAC5B,OAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACH,CAFD;;AAIA,IAAIC,QAAQ,GAAG;EAEX;AACJ;AACA;EACIC,KAAK,EAAE,SAASA,KAAT,CAAeC,GAAf,EAAoB;IACvB,IAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;IACA,IAAIC,KAAK,GAAG,CAACD,OAAD,CAAZ;;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACH,MAAxB,EAAgCM,CAAC,EAAjC,EAAqC;MACjC,IAAIC,GAAG,GAAGJ,GAAG,CAACG,CAAD,CAAb;;MACA,IAAIC,GAAG,KAAK,GAAZ,EAAiB;QACbH,OAAO,GAAG,CAAC,EAAD,CAAV;QACAN,IAAI,CAACO,KAAD,CAAJ,CAAYG,IAAZ,CAAiBJ,OAAjB;QACAC,KAAK,CAACG,IAAN,CAAWJ,OAAX;QACA;MACH;;MAED,IAAIG,GAAG,KAAK,GAAZ,EAAiB;QACbF,KAAK,CAACI,GAAN;QACAL,OAAO,GAAGN,IAAI,CAACO,KAAD,CAAd;QACAD,OAAO,CAACI,IAAR,CAAa,EAAb;QACA;MACH;;MAEDJ,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,IAA+BO,GAA/B;IACH;;IAED,OAAOF,KAAK,CAAC,CAAD,CAAZ;EACH,CA7BU;;EAgCX;AACJ;AACA;EACIK,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;IAC/B,IAAIC,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIC,SAAS,GAAGF,GAAhB,EAAqBG,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAhC,EAA0DI,EAAE,GAAG,CAA/D,EAAkEJ,SAAS,GAAGC,QAAQ,GAAGD,SAAH,GAAeA,SAAS,CAACpB,MAAM,CAACC,QAAR,CAAT,EAA1G,IAA0I;MACtI,IAAIwB,IAAJ;;MAEA,IAAIJ,QAAJ,EAAc;QACV,IAAIG,EAAE,IAAIJ,SAAS,CAACb,MAApB,EAA4B;QAC5BkB,IAAI,GAAGL,SAAS,CAACI,EAAE,EAAH,CAAhB;MACH,CAHD,MAGO;QACHA,EAAE,GAAGJ,SAAS,CAACM,IAAV,EAAL;QACA,IAAIF,EAAE,CAACG,IAAP,EAAa;QACbF,IAAI,GAAGD,EAAE,CAACI,KAAV;MACH;;MAED,IAAIf,CAAC,GAAGY,IAAR;;MAEA,IAAI,CAAC,OAAOZ,CAAP,KAAa,WAAb,GAA2B,WAA3B,GAAyCd,OAAO,CAACc,CAAD,CAAjD,MAA0D,QAA9D,EAAwE;QACpEM,MAAM,IAAI,MAAMX,QAAQ,CAACS,SAAT,CAAmBJ,CAAnB,CAAN,GAA8B,GAAxC;QACA;MACH;;MAEDM,MAAM,IAAIN,CAAV;IACH;;IACD,OAAOM,MAAP;EACH;AA3DU,CAAf;AA8DAU,MAAM,CAACC,OAAP,GAAiBtB,QAAjB"},"metadata":{},"sourceType":"module"}
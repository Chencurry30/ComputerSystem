{"ast":null,"code":"//表单验证的各个参数或者方法\n\n/*\r\n * @author 李国强\r\n * @date 2022/10/23\r\n * @Description: 校验数据的公共方法\r\n*/\n// 账号{要求2-12位}\nlet codeReg = /^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{2,20}$/; // 电话{要求11位}\n\nlet phoneReg = /^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/; // 密码{6-12位}\n\nlet passwordReg = /^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{6,12}$/; //验证码(要求{4位})\n\nlet Code; // 必须为数字\n\nlet numberReg = /^\\d+$|^\\d+[.]?\\d+$/; // 联系人\n\nlet contactsReg = /^[\\u0391-\\uFFE5A-Za-z]+$/;\nlet regId = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\nlet emailReg = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/;\n\nlet FormValidate = function () {\n  function FormValidate() {} // From表单验证规则  可用于公用的校验部分\n\n\n  FormValidate.Form = function () {\n    return {\n      //只用于账号的验证规则\n      validateUserName(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入账号'));\n        }\n\n        if (!codeReg.test(value)) {\n          callback(new Error('账号必须为2-12位(必须包含数字与字母)'));\n        } else {\n          callback();\n        }\n      },\n\n      //电话号码的验证\n      validatePhone(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入手机号码'));\n        }\n\n        if (!phoneReg.test(value)) {\n          callback(new Error('手机格式不正确'));\n        } else {\n          callback();\n        }\n      },\n\n      //用户密码的验证\n      validatePassWord(rule, value, callback) {\n        if (value === '') {\n          return callback(new Error('请输入密码'));\n        }\n\n        if (!passwordReg.test(value)) {\n          callback(new Error('密码为6-12位(必须包含数字和字母)'));\n        } else {\n          callback();\n        }\n      },\n\n      //只用于年龄的验证规则\n      validateNumber(rule, value, callback) {\n        if (value !== '') {\n          if (!numberReg.test(value)) {\n            callback(new Error('年龄只能是纯数字'));\n          } else {\n            callback();\n          }\n        } else {\n          callback();\n        }\n      },\n\n      // 密码的验证\n      validatePsdReg(rule, value, callback) {\n        if (!value) {\n          return callback(new Error('请输入密码'));\n        }\n\n        if (!passwordReg.test(value)) {\n          callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'));\n        } else {\n          callback();\n        }\n      },\n\n      // 联系人\n      validateContacts(rule, value, callback) {\n        if (!value) {\n          return callback(new Error('请输入联系人'));\n        }\n\n        if (!contactsReg.test(value)) {\n          callback(new Error('联系人不可输入特殊字符'));\n        } else {\n          callback();\n        }\n      },\n\n      // 邮箱的验证规则\n      validateEmail(rule, value, callback) {\n        if (value !== '') {\n          if (!emailReg.test(value)) {\n            callback(new Error('邮箱格式不正确'));\n          } else {\n            callback();\n          }\n        } else {\n          callback();\n        }\n      },\n\n      // 身份证的验证规则\n      ID(rule, value, callback) {\n        if (!value) {\n          return callback(new Error('身份证不能为空'));\n        }\n\n        if (!regId.test(value)) {\n          callback(new Error('请输入正确的二代身份证号码'));\n        } else {\n          callback();\n        }\n      }\n\n    };\n  };\n\n  return FormValidate;\n}();\n\nexports.FormValidate = FormValidate;","map":{"version":3,"names":["codeReg","phoneReg","passwordReg","Code","numberReg","contactsReg","regId","emailReg","FormValidate","Form","validateUserName","rule","value","callback","Error","test","validatePhone","validatePassWord","validateNumber","validatePsdReg","validateContacts","validateEmail","ID","exports"],"sources":["C:/Users/Administrator/Desktop/code/computer-system/src/frontend/src/encryption/rules.js"],"sourcesContent":["//表单验证的各个参数或者方法\r\n/*\r\n * @author 李国强\r\n * @date 2022/10/23\r\n * @Description: 校验数据的公共方法\r\n*/\r\n// 账号{要求2-12位}\r\nlet codeReg = /^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{2,20}$/\r\n\r\n// 电话{要求11位}\r\nlet phoneReg = /^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/\r\n\r\n// 密码{6-12位}\r\nlet passwordReg = /^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]{6,12}$/\r\n\r\n//验证码(要求{4位})\r\n\r\nlet Code\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 必须为数字\r\nlet numberReg = /^\\d+$|^\\d+[.]?\\d+$/\r\n\r\n\r\n// 联系人\r\nlet contactsReg = /^[\\u0391-\\uFFE5A-Za-z]+$/\r\n\r\nlet regId = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/\r\n\r\nlet emailReg = /^[A-Za-z\\d]+([-_.][A-Za-z\\d]+)*@([A-Za-z\\d]+[-.])+[A-Za-z\\d]{2,4}$/\r\n\r\nlet FormValidate = (function () {\r\n  function FormValidate () {}\r\n  // From表单验证规则  可用于公用的校验部分\r\n  FormValidate.Form = function () {\r\n    return {\r\n      //只用于账号的验证规则\r\n      validateUserName (rule, value, callback) {\r\n        if (value === '') {\r\n          return callback(new Error('请输入账号'))\r\n        }\r\n        if (!codeReg.test(value)) {\r\n          callback(new Error('账号必须为2-12位(必须包含数字与字母)'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n      //电话号码的验证\r\n      validatePhone (rule, value, callback) {\r\n        if (value === '') {\r\n          return callback(new Error('请输入手机号码'))\r\n        }\r\n        if (!phoneReg.test(value)) {\r\n          callback(new Error('手机格式不正确'))\r\n        } else {\r\n          callback()\r\n          }\r\n      },\r\n      //用户密码的验证\r\n      validatePassWord(rule,value,callback){\r\n        if(value === ''){\r\n          return callback(new Error('请输入密码'))\r\n        }\r\n        if(!passwordReg.test(value)){\r\n          callback(new Error('密码为6-12位(必须包含数字和字母)'))\r\n        }else{\r\n          callback()\r\n        }\r\n      },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      //只用于年龄的验证规则\r\n      validateNumber (rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!numberReg.test(value)) {\r\n            callback(new Error('年龄只能是纯数字'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n\r\n      // 密码的验证\r\n      validatePsdReg (rule, value, callback) {\r\n        if (!value) {\r\n          return callback(new Error('请输入密码'))\r\n        }\r\n        if (!passwordReg.test(value)) {\r\n          callback(new Error('请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n\r\n      // 联系人\r\n      validateContacts (rule, value, callback) {\r\n        if (!value) {\r\n          return callback(new Error('请输入联系人'))\r\n        }\r\n        if (!contactsReg.test(value)) {\r\n          callback(new Error('联系人不可输入特殊字符'))\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n\r\n      // 邮箱的验证规则\r\n      validateEmail (rule, value, callback) {\r\n        if (value !== '') {\r\n          if (!emailReg.test(value)) {\r\n            callback(new Error('邮箱格式不正确'))\r\n          } else {\r\n            callback()\r\n          }\r\n        } else {\r\n          callback()\r\n        }\r\n      },\r\n\r\n\r\n      // 身份证的验证规则\r\n      ID (rule, value, callback) {\r\n        if (!value) {\r\n          return callback(new Error('身份证不能为空'))\r\n        }\r\n        if (!regId.test(value)) {\r\n          callback(new Error('请输入正确的二代身份证号码'))\r\n        } else {\r\n          callback()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return FormValidate\r\n}())\r\n\r\nexports.FormValidate = FormValidate"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { b64tohex, hex2b64 } from \"./lib/jsbn/base64\";\nimport { JSEncryptRSAKey } from \"./JSEncryptRSAKey\";\nimport version from './version.json';\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\n\nvar JSEncrypt =\n/** @class */\nfunction () {\n  function JSEncrypt(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = options || {};\n    this.default_key_size = options.default_key_size ? parseInt(options.default_key_size, 10) : 1024;\n    this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n\n    this.log = options.log || false; // The private and public key.\n\n    this.key = null;\n  }\n  /**\n   * Method to set the rsa key parameter (one method is enough to set both the public\n   * and the private key, since the private key contains the public key paramenters)\n   * Log a warning if logs are enabled\n   * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n   * @public\n   */\n\n\n  JSEncrypt.prototype.setKey = function (key) {\n    if (this.log && this.key) {\n      console.warn(\"A key was already set, overriding existing.\");\n    }\n\n    this.key = new JSEncryptRSAKey(key);\n  };\n  /**\n   * Proxy method for setKey, for api compatibility\n   * @see setKey\n   * @public\n   */\n\n\n  JSEncrypt.prototype.setPrivateKey = function (privkey) {\n    // Create the key.\n    this.setKey(privkey);\n  };\n  /**\n   * Proxy method for setKey, for api compatibility\n   * @see setKey\n   * @public\n   */\n\n\n  JSEncrypt.prototype.setPublicKey = function (pubkey) {\n    // Sets the public key.\n    this.setKey(pubkey);\n  };\n  /**\n   * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n   * components of the rsa key object. Note that if the object was not set will be created\n   * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n   * @param {string} str base64 encoded crypted string to decrypt\n   * @return {string} the decrypted string\n   * @public\n   */\n\n\n  JSEncrypt.prototype.decrypt = function (str) {\n    // Return the decrypted string.\n    try {\n      return this.getKey().decrypt(b64tohex(str));\n    } catch (ex) {\n      return false;\n    }\n  };\n  /**\n   * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n   * components of the rsa key object. Note that if the object was not set will be created\n   * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n   * @param {string} str the string to encrypt\n   * @return {string} the encrypted string encoded in base64\n   * @public\n   */\n\n\n  JSEncrypt.prototype.encrypt = function (str) {\n    // Return the encrypted string.\n    try {\n      return hex2b64(this.getKey().encrypt(str));\n    } catch (ex) {\n      return false;\n    }\n  };\n  /**\n   * Proxy method for RSAKey object's sign.\n   * @param {string} str the string to sign\n   * @param {function} digestMethod hash method\n   * @param {string} digestName the name of the hash algorithm\n   * @return {string} the signature encoded in base64\n   * @public\n   */\n\n\n  JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n    // return the RSA signature of 'str' in 'hex' format.\n    try {\n      return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n    } catch (ex) {\n      return false;\n    }\n  };\n  /**\n   * Proxy method for RSAKey object's verify.\n   * @param {string} str the string to verify\n   * @param {string} signature the signature encoded in base64 to compare the string to\n   * @param {function} digestMethod hash method\n   * @return {boolean} whether the data and signature match\n   * @public\n   */\n\n\n  JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n    // Return the decrypted 'digest' of the signature.\n    try {\n      return this.getKey().verify(str, b64tohex(signature), digestMethod);\n    } catch (ex) {\n      return false;\n    }\n  };\n  /**\n   * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n   * will be created and returned\n   * @param {callback} [cb] the callback to be called if we want the key to be generated\n   * in an async fashion\n   * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n   * @public\n   */\n\n\n  JSEncrypt.prototype.getKey = function (cb) {\n    // Only create new if it does not exist.\n    if (!this.key) {\n      // Get a new private key.\n      this.key = new JSEncryptRSAKey();\n\n      if (cb && {}.toString.call(cb) === \"[object Function]\") {\n        this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n        return;\n      } // Generate the key.\n\n\n      this.key.generate(this.default_key_size, this.default_public_exponent);\n    }\n\n    return this.key;\n  };\n  /**\n   * Returns the pem encoded representation of the private key\n   * If the key doesn't exists a new key will be created\n   * @returns {string} pem encoded representation of the private key WITH header and footer\n   * @public\n   */\n\n\n  JSEncrypt.prototype.getPrivateKey = function () {\n    // Return the private representation of this key.\n    return this.getKey().getPrivateKey();\n  };\n  /**\n   * Returns the pem encoded representation of the private key\n   * If the key doesn't exists a new key will be created\n   * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n   * @public\n   */\n\n\n  JSEncrypt.prototype.getPrivateKeyB64 = function () {\n    // Return the private representation of this key.\n    return this.getKey().getPrivateBaseKeyB64();\n  };\n  /**\n   * Returns the pem encoded representation of the public key\n   * If the key doesn't exists a new key will be created\n   * @returns {string} pem encoded representation of the public key WITH header and footer\n   * @public\n   */\n\n\n  JSEncrypt.prototype.getPublicKey = function () {\n    // Return the private representation of this key.\n    return this.getKey().getPublicKey();\n  };\n  /**\n   * Returns the pem encoded representation of the public key\n   * If the key doesn't exists a new key will be created\n   * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n   * @public\n   */\n\n\n  JSEncrypt.prototype.getPublicKeyB64 = function () {\n    // Return the private representation of this key.\n    return this.getKey().getPublicBaseKeyB64();\n  };\n\n  JSEncrypt.version = version.version;\n  return JSEncrypt;\n}();\n\nexport { JSEncrypt };","map":{"version":3,"names":["b64tohex","hex2b64","JSEncryptRSAKey","version","JSEncrypt","options","default_key_size","parseInt","default_public_exponent","log","key","prototype","setKey","console","warn","setPrivateKey","privkey","setPublicKey","pubkey","decrypt","str","getKey","ex","encrypt","sign","digestMethod","digestName","verify","signature","cb","toString","call","generateAsync","generate","getPrivateKey","getPrivateKeyB64","getPrivateBaseKeyB64","getPublicKey","getPublicKeyB64","getPublicBaseKeyB64"],"sources":["C:/Users/Administrator/Desktop/code/computer-system/src/frontend/node_modules/jsencrypt/lib/JSEncrypt.js"],"sourcesContent":["import { b64tohex, hex2b64 } from \"./lib/jsbn/base64\";\nimport { JSEncryptRSAKey } from \"./JSEncryptRSAKey\";\nimport version from './version.json';\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\nvar JSEncrypt = /** @class */ (function () {\n    function JSEncrypt(options) {\n        if (options === void 0) { options = {}; }\n        options = options || {};\n        this.default_key_size = options.default_key_size ? parseInt(options.default_key_size, 10) : 1024;\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n        this.log = options.log || false;\n        // The private and public key.\n        this.key = null;\n    }\n    /**\n     * Method to set the rsa key parameter (one method is enough to set both the public\n     * and the private key, since the private key contains the public key paramenters)\n     * Log a warning if logs are enabled\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n     * @public\n     */\n    JSEncrypt.prototype.setKey = function (key) {\n        if (this.log && this.key) {\n            console.warn(\"A key was already set, overriding existing.\");\n        }\n        this.key = new JSEncryptRSAKey(key);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n        // Create the key.\n        this.setKey(privkey);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n        // Sets the public key.\n        this.setKey(pubkey);\n    };\n    /**\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str base64 encoded crypted string to decrypt\n     * @return {string} the decrypted string\n     * @public\n     */\n    JSEncrypt.prototype.decrypt = function (str) {\n        // Return the decrypted string.\n        try {\n            return this.getKey().decrypt(b64tohex(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str the string to encrypt\n     * @return {string} the encrypted string encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.encrypt = function (str) {\n        // Return the encrypted string.\n        try {\n            return hex2b64(this.getKey().encrypt(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's sign.\n     * @param {string} str the string to sign\n     * @param {function} digestMethod hash method\n     * @param {string} digestName the name of the hash algorithm\n     * @return {string} the signature encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n        // return the RSA signature of 'str' in 'hex' format.\n        try {\n            return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's verify.\n     * @param {string} str the string to verify\n     * @param {string} signature the signature encoded in base64 to compare the string to\n     * @param {function} digestMethod hash method\n     * @return {boolean} whether the data and signature match\n     * @public\n     */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n        // Return the decrypted 'digest' of the signature.\n        try {\n            return this.getKey().verify(str, b64tohex(signature), digestMethod);\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n     * will be created and returned\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\n     * in an async fashion\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n     * @public\n     */\n    JSEncrypt.prototype.getKey = function (cb) {\n        // Only create new if it does not exist.\n        if (!this.key) {\n            // Get a new private key.\n            this.key = new JSEncryptRSAKey();\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n                return;\n            }\n            // Generate the key.\n            this.key.generate(this.default_key_size, this.default_public_exponent);\n        }\n        return this.key;\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateKey();\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicKey();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = version.version;\n    return JSEncrypt;\n}());\nexport { JSEncrypt };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS;AAAG;AAAe,YAAY;EACvC,SAASA,SAAT,CAAmBC,OAAnB,EAA4B;IACxB,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,EAAV;IAAe;;IACzCA,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,KAAKC,gBAAL,GAAwBD,OAAO,CAACC,gBAAR,GAA2BC,QAAQ,CAACF,OAAO,CAACC,gBAAT,EAA2B,EAA3B,CAAnC,GAAoE,IAA5F;IACA,KAAKE,uBAAL,GAA+BH,OAAO,CAACG,uBAAR,IAAmC,QAAlE,CAJwB,CAIoD;;IAC5E,KAAKC,GAAL,GAAWJ,OAAO,CAACI,GAAR,IAAe,KAA1B,CALwB,CAMxB;;IACA,KAAKC,GAAL,GAAW,IAAX;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIN,SAAS,CAACO,SAAV,CAAoBC,MAApB,GAA6B,UAAUF,GAAV,EAAe;IACxC,IAAI,KAAKD,GAAL,IAAY,KAAKC,GAArB,EAA0B;MACtBG,OAAO,CAACC,IAAR,CAAa,6CAAb;IACH;;IACD,KAAKJ,GAAL,GAAW,IAAIR,eAAJ,CAAoBQ,GAApB,CAAX;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;;;EACIN,SAAS,CAACO,SAAV,CAAoBI,aAApB,GAAoC,UAAUC,OAAV,EAAmB;IACnD;IACA,KAAKJ,MAAL,CAAYI,OAAZ;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACIZ,SAAS,CAACO,SAAV,CAAoBM,YAApB,GAAmC,UAAUC,MAAV,EAAkB;IACjD;IACA,KAAKN,MAAL,CAAYM,MAAZ;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACId,SAAS,CAACO,SAAV,CAAoBQ,OAApB,GAA8B,UAAUC,GAAV,EAAe;IACzC;IACA,IAAI;MACA,OAAO,KAAKC,MAAL,GAAcF,OAAd,CAAsBnB,QAAQ,CAACoB,GAAD,CAA9B,CAAP;IACH,CAFD,CAGA,OAAOE,EAAP,EAAW;MACP,OAAO,KAAP;IACH;EACJ,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlB,SAAS,CAACO,SAAV,CAAoBY,OAApB,GAA8B,UAAUH,GAAV,EAAe;IACzC;IACA,IAAI;MACA,OAAOnB,OAAO,CAAC,KAAKoB,MAAL,GAAcE,OAAd,CAAsBH,GAAtB,CAAD,CAAd;IACH,CAFD,CAGA,OAAOE,EAAP,EAAW;MACP,OAAO,KAAP;IACH;EACJ,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlB,SAAS,CAACO,SAAV,CAAoBa,IAApB,GAA2B,UAAUJ,GAAV,EAAeK,YAAf,EAA6BC,UAA7B,EAAyC;IAChE;IACA,IAAI;MACA,OAAOzB,OAAO,CAAC,KAAKoB,MAAL,GAAcG,IAAd,CAAmBJ,GAAnB,EAAwBK,YAAxB,EAAsCC,UAAtC,CAAD,CAAd;IACH,CAFD,CAGA,OAAOJ,EAAP,EAAW;MACP,OAAO,KAAP;IACH;EACJ,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlB,SAAS,CAACO,SAAV,CAAoBgB,MAApB,GAA6B,UAAUP,GAAV,EAAeQ,SAAf,EAA0BH,YAA1B,EAAwC;IACjE;IACA,IAAI;MACA,OAAO,KAAKJ,MAAL,GAAcM,MAAd,CAAqBP,GAArB,EAA0BpB,QAAQ,CAAC4B,SAAD,CAAlC,EAA+CH,YAA/C,CAAP;IACH,CAFD,CAGA,OAAOH,EAAP,EAAW;MACP,OAAO,KAAP;IACH;EACJ,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlB,SAAS,CAACO,SAAV,CAAoBU,MAApB,GAA6B,UAAUQ,EAAV,EAAc;IACvC;IACA,IAAI,CAAC,KAAKnB,GAAV,EAAe;MACX;MACA,KAAKA,GAAL,GAAW,IAAIR,eAAJ,EAAX;;MACA,IAAI2B,EAAE,IAAI,GAAGC,QAAH,CAAYC,IAAZ,CAAiBF,EAAjB,MAAyB,mBAAnC,EAAwD;QACpD,KAAKnB,GAAL,CAASsB,aAAT,CAAuB,KAAK1B,gBAA5B,EAA8C,KAAKE,uBAAnD,EAA4EqB,EAA5E;QACA;MACH,CANU,CAOX;;;MACA,KAAKnB,GAAL,CAASuB,QAAT,CAAkB,KAAK3B,gBAAvB,EAAyC,KAAKE,uBAA9C;IACH;;IACD,OAAO,KAAKE,GAAZ;EACH,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;;;EACIN,SAAS,CAACO,SAAV,CAAoBuB,aAApB,GAAoC,YAAY;IAC5C;IACA,OAAO,KAAKb,MAAL,GAAca,aAAd,EAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACI9B,SAAS,CAACO,SAAV,CAAoBwB,gBAApB,GAAuC,YAAY;IAC/C;IACA,OAAO,KAAKd,MAAL,GAAce,oBAAd,EAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIhC,SAAS,CAACO,SAAV,CAAoB0B,YAApB,GAAmC,YAAY;IAC3C;IACA,OAAO,KAAKhB,MAAL,GAAcgB,YAAd,EAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIjC,SAAS,CAACO,SAAV,CAAoB2B,eAApB,GAAsC,YAAY;IAC9C;IACA,OAAO,KAAKjB,MAAL,GAAckB,mBAAd,EAAP;EACH,CAHD;;EAIAnC,SAAS,CAACD,OAAV,GAAoBA,OAAO,CAACA,OAA5B;EACA,OAAOC,SAAP;AACH,CA7K8B,EAA/B;;AA8KA,SAASA,SAAT"},"metadata":{},"sourceType":"module"}
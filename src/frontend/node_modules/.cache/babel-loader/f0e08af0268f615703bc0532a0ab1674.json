{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = tokenizer;\nvar SINGLE_QUOTE = 39;\nvar DOUBLE_QUOTE = 34;\nvar BACKSLASH = 92;\nvar SLASH = 47;\nvar NEWLINE = 10;\nvar SPACE = 32;\nvar FEED = 12;\nvar TAB = 9;\nvar CR = 13;\nvar OPEN_SQUARE = 91;\nvar CLOSE_SQUARE = 93;\nvar OPEN_PARENTHESES = 40;\nvar CLOSE_PARENTHESES = 41;\nvar OPEN_CURLY = 123;\nvar CLOSE_CURLY = 125;\nvar SEMICOLON = 59;\nvar ASTERISK = 42;\nvar COLON = 58;\nvar AT = 64;\nvar RE_AT_END = /[ \\n\\t\\r\\f\\{\\}\\(\\)'\"\\\\;/\\[\\]#]/g;\nvar RE_WORD_END = /[ \\n\\t\\r\\f\\(\\)\\{\\}:;@!'\"\\\\\\]\\[#]|\\/(?=\\*)/g;\nvar RE_BAD_BRACKET = /.[\\\\\\/\\(\"'\\n]/;\nvar RE_HEX_ESCAPE = /[a-f0-9]/i;\n\nfunction tokenizer(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var css = input.css.valueOf();\n  var ignore = options.ignoreErrors;\n  var code = void 0,\n      next = void 0,\n      quote = void 0,\n      lines = void 0,\n      last = void 0,\n      content = void 0,\n      escape = void 0,\n      nextLine = void 0,\n      nextOffset = void 0,\n      escaped = void 0,\n      escapePos = void 0,\n      prev = void 0,\n      n = void 0,\n      currentToken = void 0;\n  var length = css.length;\n  var offset = -1;\n  var line = 1;\n  var pos = 0;\n  var buffer = [];\n  var returned = [];\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset);\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length;\n  }\n\n  function nextToken() {\n    if (returned.length) return returned.pop();\n    if (pos >= length) return;\n    code = css.charCodeAt(pos);\n\n    if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {\n      offset = pos;\n      line += 1;\n    }\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        next = pos;\n\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n\n          if (code === NEWLINE) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n\n        currentToken = ['space', css.slice(pos, next)];\n        pos = next - 1;\n        break;\n\n      case OPEN_SQUARE:\n        currentToken = ['[', '[', line, pos - offset];\n        break;\n\n      case CLOSE_SQUARE:\n        currentToken = [']', ']', line, pos - offset];\n        break;\n\n      case OPEN_CURLY:\n        currentToken = ['{', '{', line, pos - offset];\n        break;\n\n      case CLOSE_CURLY:\n        currentToken = ['}', '}', line, pos - offset];\n        break;\n\n      case COLON:\n        currentToken = [':', ':', line, pos - offset];\n        break;\n\n      case SEMICOLON:\n        currentToken = [';', ';', line, pos - offset];\n        break;\n\n      case OPEN_PARENTHESES:\n        prev = buffer.length ? buffer.pop()[1] : '';\n        n = css.charCodeAt(pos + 1);\n\n        if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n          next = pos;\n\n          do {\n            escaped = false;\n            next = css.indexOf(')', next + 1);\n\n            if (next === -1) {\n              if (ignore) {\n                next = pos;\n                break;\n              } else {\n                unclosed('bracket');\n              }\n            }\n\n            escapePos = next;\n\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n\n          currentToken = ['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n          pos = next;\n        } else {\n          next = css.indexOf(')', pos + 1);\n          content = css.slice(pos, next + 1);\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', line, pos - offset];\n          } else {\n            currentToken = ['brackets', content, line, pos - offset, line, next - offset];\n            pos = next;\n          }\n        }\n\n        break;\n\n      case CLOSE_PARENTHESES:\n        currentToken = [')', ')', line, pos - offset];\n        break;\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n        next = pos;\n\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n\n          if (next === -1) {\n            if (ignore) {\n              next = pos + 1;\n              break;\n            } else {\n              unclosed('string');\n            }\n          }\n\n          escapePos = next;\n\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n\n        content = css.slice(pos, next + 1);\n        lines = content.split('\\n');\n        last = lines.length - 1;\n\n        if (last > 0) {\n          nextLine = line + last;\n          nextOffset = next - lines[last].length;\n        } else {\n          nextLine = line;\n          nextOffset = offset;\n        }\n\n        currentToken = ['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset];\n        offset = nextOffset;\n        line = nextLine;\n        pos = next;\n        break;\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1;\n        RE_AT_END.test(css);\n\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1;\n        } else {\n          next = RE_AT_END.lastIndex - 2;\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n        pos = next;\n        break;\n\n      case BACKSLASH:\n        next = pos;\n        escape = true;\n\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1;\n          escape = !escape;\n        }\n\n        code = css.charCodeAt(next + 1);\n\n        if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n          next += 1;\n\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1;\n            }\n\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1;\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n        pos = next;\n        break;\n\n      default:\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1;\n\n          if (next === 0) {\n            if (ignore) {\n              next = css.length;\n            } else {\n              unclosed('comment');\n            }\n          }\n\n          content = css.slice(pos, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n\n          currentToken = ['comment', content, line, pos - offset, nextLine, next - nextOffset];\n          offset = nextOffset;\n          line = nextLine;\n          pos = next;\n        } else {\n          RE_WORD_END.lastIndex = pos + 1;\n          RE_WORD_END.test(css);\n\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = RE_WORD_END.lastIndex - 2;\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];\n          buffer.push(currentToken);\n          pos = next;\n        }\n\n        break;\n    }\n\n    pos++;\n    return currentToken;\n  }\n\n  function back(token) {\n    returned.push(token);\n  }\n\n  return {\n    back: back,\n    nextToken: nextToken,\n    endOfFile: endOfFile\n  };\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["tokenizer","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","input","options","css","valueOf","ignore","ignoreErrors","code","next","quote","lines","last","content","escape","nextLine","nextOffset","escaped","escapePos","prev","n","currentToken","length","offset","line","pos","buffer","returned","unclosed","what","error","endOfFile","nextToken","pop","charCodeAt","slice","indexOf","test","split","lastIndex","charAt","push","back","token"],"sources":["tokenize.es6"],"sourcesContent":["const SINGLE_QUOTE      = '\\''.charCodeAt(0);\nconst DOUBLE_QUOTE      =  '\"'.charCodeAt(0);\nconst BACKSLASH         = '\\\\'.charCodeAt(0);\nconst SLASH             =  '/'.charCodeAt(0);\nconst NEWLINE           = '\\n'.charCodeAt(0);\nconst SPACE             =  ' '.charCodeAt(0);\nconst FEED              = '\\f'.charCodeAt(0);\nconst TAB               = '\\t'.charCodeAt(0);\nconst CR                = '\\r'.charCodeAt(0);\nconst OPEN_SQUARE       =  '['.charCodeAt(0);\nconst CLOSE_SQUARE      =  ']'.charCodeAt(0);\nconst OPEN_PARENTHESES  =  '('.charCodeAt(0);\nconst CLOSE_PARENTHESES =  ')'.charCodeAt(0);\nconst OPEN_CURLY        =  '{'.charCodeAt(0);\nconst CLOSE_CURLY       =  '}'.charCodeAt(0);\nconst SEMICOLON         =  ';'.charCodeAt(0);\nconst ASTERISK          =  '*'.charCodeAt(0);\nconst COLON             =  ':'.charCodeAt(0);\nconst AT                =  '@'.charCodeAt(0);\n\nconst RE_AT_END      = /[ \\n\\t\\r\\f\\{\\}\\(\\)'\"\\\\;/\\[\\]#]/g;\nconst RE_WORD_END    = /[ \\n\\t\\r\\f\\(\\)\\{\\}:;@!'\"\\\\\\]\\[#]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\\\\\/\\(\"'\\n]/;\nconst RE_HEX_ESCAPE  = /[a-f0-9]/i;\n\nexport default function tokenizer(input, options = {}) {\n    let css = input.css.valueOf();\n    let ignore = options.ignoreErrors;\n\n    let code, next, quote, lines, last, content, escape,\n        nextLine, nextOffset, escaped, escapePos, prev, n, currentToken;\n\n    let length = css.length;\n    let offset = -1;\n    let line = 1;\n    let pos = 0;\n    let buffer = [];\n    let returned = [];\n\n    function unclosed(what) {\n        throw input.error('Unclosed ' + what, line, pos - offset);\n    }\n\n    function endOfFile() {\n        return returned.length === 0 && pos >= length;\n    }\n\n    function nextToken() {\n        if ( returned.length ) return returned.pop();\n        if ( pos >= length ) return;\n\n        code = css.charCodeAt(pos);\n        if ( code === NEWLINE || code === FEED ||\n             code === CR && css.charCodeAt(pos + 1) !== NEWLINE ) {\n            offset = pos;\n            line += 1;\n        }\n\n        switch ( code ) {\n        case NEWLINE:\n        case SPACE:\n        case TAB:\n        case CR:\n        case FEED:\n            next = pos;\n            do {\n                next += 1;\n                code = css.charCodeAt(next);\n                if ( code === NEWLINE ) {\n                    offset = next;\n                    line += 1;\n                }\n            } while ( code === SPACE   ||\n                      code === NEWLINE ||\n                      code === TAB     ||\n                      code === CR      ||\n                      code === FEED );\n\n            currentToken = ['space', css.slice(pos, next)];\n            pos = next - 1;\n            break;\n\n        case OPEN_SQUARE:\n            currentToken = ['[', '[', line, pos - offset];\n            break;\n\n        case CLOSE_SQUARE:\n            currentToken = [']', ']', line, pos - offset];\n            break;\n\n        case OPEN_CURLY:\n            currentToken = ['{', '{', line, pos - offset];\n            break;\n\n        case CLOSE_CURLY:\n            currentToken = ['}', '}', line, pos - offset];\n            break;\n\n        case COLON:\n            currentToken = [':', ':', line, pos - offset];\n            break;\n\n        case SEMICOLON:\n            currentToken = [';', ';', line, pos - offset];\n            break;\n\n        case OPEN_PARENTHESES:\n            prev = buffer.length ? buffer.pop()[1] : '';\n            n    = css.charCodeAt(pos + 1);\n            if ( prev === 'url' &&\n                 n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE &&\n                 n !== SPACE && n !== NEWLINE && n !== TAB &&\n                 n !== FEED && n !== CR ) {\n                next = pos;\n                do {\n                    escaped = false;\n                    next    = css.indexOf(')', next + 1);\n                    if ( next === -1 ) {\n                        if ( ignore ) {\n                            next = pos;\n                            break;\n                        } else {\n                            unclosed('bracket');\n                        }\n                    }\n                    escapePos = next;\n                    while ( css.charCodeAt(escapePos - 1) === BACKSLASH ) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while ( escaped );\n\n                currentToken = ['brackets', css.slice(pos, next + 1),\n                    line, pos  - offset,\n                    line, next - offset\n                ];\n\n                pos = next;\n\n            } else {\n                next    = css.indexOf(')', pos + 1);\n                content = css.slice(pos, next + 1);\n\n                if ( next === -1 || RE_BAD_BRACKET.test(content) ) {\n                    currentToken = ['(', '(', line, pos - offset];\n                } else {\n                    currentToken = ['brackets', content,\n                        line, pos  - offset,\n                        line, next - offset\n                    ];\n                    pos = next;\n                }\n            }\n\n            break;\n\n        case CLOSE_PARENTHESES:\n            currentToken = [')', ')', line, pos - offset];\n            break;\n\n        case SINGLE_QUOTE:\n        case DOUBLE_QUOTE:\n            quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n            next  = pos;\n            do {\n                escaped = false;\n                next    = css.indexOf(quote, next + 1);\n                if ( next === -1 ) {\n                    if ( ignore ) {\n                        next = pos + 1;\n                        break;\n                    } else {\n                        unclosed('string');\n                    }\n                }\n                escapePos = next;\n                while ( css.charCodeAt(escapePos - 1) === BACKSLASH ) {\n                    escapePos -= 1;\n                    escaped = !escaped;\n                }\n            } while ( escaped );\n\n            content = css.slice(pos, next + 1);\n            lines   = content.split('\\n');\n            last    = lines.length - 1;\n\n            if ( last > 0 ) {\n                nextLine   = line + last;\n                nextOffset = next - lines[last].length;\n            } else {\n                nextLine   = line;\n                nextOffset = offset;\n            }\n\n            currentToken = ['string', css.slice(pos, next + 1),\n                line, pos  - offset,\n                nextLine, next - nextOffset\n            ];\n\n            offset = nextOffset;\n            line   = nextLine;\n            pos    = next;\n            break;\n\n        case AT:\n            RE_AT_END.lastIndex = pos + 1;\n            RE_AT_END.test(css);\n            if ( RE_AT_END.lastIndex === 0 ) {\n                next = css.length - 1;\n            } else {\n                next = RE_AT_END.lastIndex - 2;\n            }\n\n            currentToken = ['at-word', css.slice(pos, next + 1),\n                line, pos  - offset,\n                line, next - offset\n            ];\n\n            pos = next;\n            break;\n\n        case BACKSLASH:\n            next   = pos;\n            escape = true;\n            while ( css.charCodeAt(next + 1) === BACKSLASH ) {\n                next  += 1;\n                escape = !escape;\n            }\n            code = css.charCodeAt(next + 1);\n            if ( escape && (code !== SLASH   &&\n                            code !== SPACE   &&\n                            code !== NEWLINE &&\n                            code !== TAB     &&\n                            code !== CR      &&\n                            code !== FEED ) ) {\n                next += 1;\n                if ( RE_HEX_ESCAPE.test(css.charAt(next)) ) {\n                    while ( RE_HEX_ESCAPE.test(css.charAt(next + 1)) ) {\n                        next += 1;\n                    }\n                    if ( css.charCodeAt(next + 1) === SPACE ) {\n                        next += 1;\n                    }\n                }\n            }\n\n            currentToken = ['word', css.slice(pos, next + 1),\n                line, pos  - offset,\n                line, next - offset\n            ];\n\n            pos = next;\n            break;\n\n        default:\n            if ( code === SLASH && css.charCodeAt(pos + 1) === ASTERISK ) {\n                next = css.indexOf('*/', pos + 2) + 1;\n                if ( next === 0 ) {\n                    if ( ignore ) {\n                        next = css.length;\n                    } else {\n                        unclosed('comment');\n                    }\n                }\n\n                content = css.slice(pos, next + 1);\n                lines   = content.split('\\n');\n                last    = lines.length - 1;\n\n                if ( last > 0 ) {\n                    nextLine   = line + last;\n                    nextOffset = next - lines[last].length;\n                } else {\n                    nextLine   = line;\n                    nextOffset = offset;\n                }\n\n                currentToken = ['comment', content,\n                    line,     pos  - offset,\n                    nextLine, next - nextOffset\n                ];\n\n                offset = nextOffset;\n                line   = nextLine;\n                pos    = next;\n\n            } else {\n                RE_WORD_END.lastIndex = pos + 1;\n                RE_WORD_END.test(css);\n                if ( RE_WORD_END.lastIndex === 0 ) {\n                    next = css.length - 1;\n                } else {\n                    next = RE_WORD_END.lastIndex - 2;\n                }\n\n                currentToken = ['word', css.slice(pos, next + 1),\n                    line, pos  - offset,\n                    line, next - offset\n                ];\n\n                buffer.push(currentToken);\n\n                pos = next;\n            }\n\n            break;\n        }\n\n        pos++;\n        return currentToken;\n    }\n\n    function back(token) {\n        returned.push(token);\n    }\n\n    return {\n        back,\n        nextToken,\n        endOfFile\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
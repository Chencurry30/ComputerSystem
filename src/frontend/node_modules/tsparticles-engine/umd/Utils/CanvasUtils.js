(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./ColorUtils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.alterHsl = exports.drawParticlePlugin = exports.drawPlugin = exports.drawShapeAfterEffect = exports.drawShape = exports.drawParticle = exports.clear = exports.paintBase = exports.drawTriangle = exports.drawLine = void 0;
    const ColorUtils_1 = require("./ColorUtils");
    function drawLine(context, begin, end) {
        context.beginPath();
        context.moveTo(begin.x, begin.y);
        context.lineTo(end.x, end.y);
        context.closePath();
    }
    exports.drawLine = drawLine;
    function drawTriangle(context, p1, p2, p3) {
        context.beginPath();
        context.moveTo(p1.x, p1.y);
        context.lineTo(p2.x, p2.y);
        context.lineTo(p3.x, p3.y);
        context.closePath();
    }
    exports.drawTriangle = drawTriangle;
    function paintBase(context, dimension, baseColor) {
        context.save();
        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : "rgba(0,0,0,0)";
        context.fillRect(0, 0, dimension.width, dimension.height);
        context.restore();
    }
    exports.paintBase = paintBase;
    function clear(context, dimension) {
        context.clearRect(0, 0, dimension.width, dimension.height);
    }
    exports.clear = clear;
    function drawParticle(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const { container, context, particle, delta, colorStyles, backgroundMask, composite, radius, opacity, shadow, transform, } = data;
        const pos = particle.getPosition();
        context.save();
        if (transform.a !== undefined ||
            transform.b !== undefined ||
            transform.c !== undefined ||
            transform.d !== undefined) {
            context.setTransform((_a = transform.a) !== null && _a !== void 0 ? _a : 1, (_b = transform.b) !== null && _b !== void 0 ? _b : 0, (_c = transform.c) !== null && _c !== void 0 ? _c : 0, (_d = transform.d) !== null && _d !== void 0 ? _d : 1, pos.x, pos.y);
        }
        else {
            context.translate(pos.x, pos.y);
        }
        context.beginPath();
        const angle = particle.rotation + (particle.options.rotate.path ? particle.velocity.angle : 0);
        if (angle !== 0) {
            context.rotate(angle);
        }
        if (backgroundMask) {
            context.globalCompositeOperation = composite;
        }
        const shadowColor = particle.shadowColor;
        if (shadow.enable && shadowColor) {
            context.shadowBlur = shadow.blur;
            context.shadowColor = (0, ColorUtils_1.getStyleFromRgb)(shadowColor);
            context.shadowOffsetX = shadow.offset.x;
            context.shadowOffsetY = shadow.offset.y;
        }
        if (colorStyles.fill) {
            context.fillStyle = colorStyles.fill;
        }
        const stroke = particle.stroke;
        context.lineWidth = (_e = particle.strokeWidth) !== null && _e !== void 0 ? _e : 0;
        if (colorStyles.stroke) {
            context.strokeStyle = colorStyles.stroke;
        }
        drawShape(container, context, particle, radius, opacity, delta);
        if (((_f = stroke === null || stroke === void 0 ? void 0 : stroke.width) !== null && _f !== void 0 ? _f : 0) > 0) {
            context.stroke();
        }
        if (particle.close) {
            context.closePath();
        }
        if (particle.fill) {
            context.fill();
        }
        context.restore();
        context.save();
        if (transform.a !== undefined ||
            transform.b !== undefined ||
            transform.c !== undefined ||
            transform.d !== undefined) {
            context.setTransform((_g = transform.a) !== null && _g !== void 0 ? _g : 1, (_h = transform.b) !== null && _h !== void 0 ? _h : 0, (_j = transform.c) !== null && _j !== void 0 ? _j : 0, (_k = transform.d) !== null && _k !== void 0 ? _k : 1, pos.x, pos.y);
        }
        else {
            context.translate(pos.x, pos.y);
        }
        if (particle.rotation) {
            context.rotate(particle.rotation);
        }
        if (backgroundMask) {
            context.globalCompositeOperation = composite;
        }
        drawShapeAfterEffect(container, context, particle, radius, opacity, delta);
        context.restore();
    }
    exports.drawParticle = drawParticle;
    function drawShape(container, context, particle, radius, opacity, delta) {
        if (!particle.shape) {
            return;
        }
        const drawer = container.drawers.get(particle.shape);
        if (!drawer) {
            return;
        }
        drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);
    }
    exports.drawShape = drawShape;
    function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {
        if (!particle.shape) {
            return;
        }
        const drawer = container.drawers.get(particle.shape);
        if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {
            return;
        }
        drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);
    }
    exports.drawShapeAfterEffect = drawShapeAfterEffect;
    function drawPlugin(context, plugin, delta) {
        if (!plugin.draw) {
            return;
        }
        context.save();
        plugin.draw(context, delta);
        context.restore();
    }
    exports.drawPlugin = drawPlugin;
    function drawParticlePlugin(context, plugin, particle, delta) {
        if (!plugin.drawParticle) {
            return;
        }
        context.save();
        plugin.drawParticle(context, particle, delta);
        context.restore();
    }
    exports.drawParticlePlugin = drawParticlePlugin;
    function alterHsl(color, type, value) {
        return {
            h: color.h,
            s: color.s,
            l: color.l + (type === "darken" ? -1 : 1) * value,
        };
    }
    exports.alterHsl = alterHsl;
});

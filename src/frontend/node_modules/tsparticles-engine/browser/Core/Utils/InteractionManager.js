export class InteractionManager {
    /**
     * The constructor of the interaction manager
     * @param engine the parent engine
     * @param container the parent container
     */
    constructor(engine, container) {
        this.container = container;
        this._engine = engine;
        this._interactors = this._engine.plugins.getInteractors(this.container, true);
        this._externalInteractors = [];
        this._particleInteractors = [];
    }
    /**
     * Iterates through the external interactivity manager and call the interact method, if they are enabled
     * @param delta this variable contains the delta between the current frame and the previous frame
     */
    async externalInteract(delta) {
        for (const interactor of this._externalInteractors) {
            if (interactor.isEnabled()) {
                await interactor.interact(delta);
            }
        }
    }
    handleClickMode(mode) {
        for (const interactor of this._externalInteractors) {
            if (interactor.handleClickMode) {
                interactor.handleClickMode(mode);
            }
        }
    }
    /**
     * Initializes the interaction manager, loading all the engine registered managers into the container
     */
    init() {
        this._externalInteractors = [];
        this._particleInteractors = [];
        for (const interactor of this._interactors) {
            switch (interactor.type) {
                case 0 /* InteractorType.External */:
                    this._externalInteractors.push(interactor);
                    break;
                case 1 /* InteractorType.Particles */:
                    this._particleInteractors.push(interactor);
                    break;
            }
            interactor.init();
        }
    }
    /**
     * Iterates through the particles interactions manager and call the interact method, if they are enabled
     * @param particle the particle responsible for the current interaction
     * @param delta this variable contains the delta between the current frame and the previous frame
     */
    async particlesInteract(particle, delta) {
        for (const interactor of this._externalInteractors) {
            interactor.clear(particle, delta);
        }
        /* interaction auto between particles */
        for (const interactor of this._particleInteractors) {
            if (interactor.isEnabled(particle)) {
                await interactor.interact(particle, delta);
            }
        }
    }
    /**
     * Iterates through the external interactivity manager and call the interact method, if they are enabled
     * @param particle the particle to reset
     */
    async reset(particle) {
        for (const interactor of this._externalInteractors) {
            if (interactor.isEnabled()) {
                await interactor.reset(particle);
            }
        }
        for (const interactor of this._particleInteractors) {
            if (interactor.isEnabled(particle)) {
                await interactor.reset(particle);
            }
        }
    }
}

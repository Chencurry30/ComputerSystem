import type { ICenterCoordinates, ICoordinates, ICoordinates3d } from "./Interfaces/ICoordinates";
import type { IHsl, IRgb } from "./Interfaces/Colors";
import type { Container } from "./Container";
import type { Engine } from "../engine";
import type { IBubbleParticleData } from "./Interfaces/IBubbleParticleData";
import type { IDelta } from "./Interfaces/IDelta";
import type { IMovePathGenerator } from "./Interfaces/IMovePathGenerator";
import type { IParticle } from "./Interfaces/IParticle";
import type { IParticleHslAnimation } from "./Interfaces/IParticleHslAnimation";
import type { IParticleNumericValueAnimation } from "./Interfaces/IParticleValueAnimation";
import type { IParticleRetinaProps } from "./Interfaces/IParticleRetinaProps";
import type { IParticleRoll } from "./Interfaces/IParticleRoll";
import type { IParticleWobble } from "./Interfaces/IParticleWobble";
import type { IParticlesOptions } from "../Options/Interfaces/Particles/IParticlesOptions";
import type { IShapeValues } from "./Interfaces/IShapeValues";
import type { ISlowParticleData } from "./Interfaces/ISlowParticleData";
import { Interactivity } from "../Options/Classes/Interactivity/Interactivity";
import { ParticleOutType } from "../Enums/Types/ParticleOutType";
import type { RecursivePartial } from "../Types/RecursivePartial";
import type { Stroke } from "../Options/Classes/Particles/Stroke";
import { Vector } from "./Utils/Vector";
import { Vector3d } from "./Utils/Vector3d";
export declare class Particle implements IParticle {
    readonly id: number;
    readonly container: Container;
    readonly group?: string | undefined;
    backColor?: IHsl;
    readonly bubble: IBubbleParticleData;
    close: boolean;
    color?: IParticleHslAnimation;
    destroyed: boolean;
    direction: number;
    fill: boolean;
    ignoresResizeRatio: boolean;
    readonly initialPosition: Vector;
    readonly initialVelocity: Vector;
    readonly interactivity: Interactivity;
    lastPathTime: number;
    misplaced: boolean;
    readonly moveCenter: ICenterCoordinates;
    readonly moveDecay: number;
    readonly offset: Vector;
    opacity?: IParticleNumericValueAnimation;
    readonly options: import("..").ParticlesOptions;
    readonly outType: ParticleOutType;
    readonly pathDelay: number;
    readonly pathGenerator?: IMovePathGenerator;
    readonly position: Vector3d;
    randomIndexData?: number;
    readonly retina: IParticleRetinaProps;
    roll?: IParticleRoll;
    rotation: number;
    readonly shadowColor: IRgb | undefined;
    readonly shape: string;
    readonly shapeData?: IShapeValues;
    readonly sides: number;
    readonly size: IParticleNumericValueAnimation;
    readonly slow: ISlowParticleData;
    spawning: boolean;
    stroke?: Stroke;
    strokeColor?: IParticleHslAnimation;
    strokeWidth?: number;
    unbreakable: boolean;
    readonly velocity: Vector;
    wobble?: IParticleWobble;
    readonly zIndexFactor: number;
    private readonly _engine;
    constructor(engine: Engine, id: number, container: Container, position?: ICoordinates, overrideOptions?: RecursivePartial<IParticlesOptions>, group?: string | undefined);
    destroy(override?: boolean): void;
    draw(delta: IDelta): void;
    getFillColor(): IHsl | undefined;
    getMass(): number;
    getPosition(): ICoordinates3d;
    getRadius(): number;
    getStrokeColor(): IHsl | undefined;
    isInsideCanvas(): boolean;
    isVisible(): boolean;
    reset(): void;
    private _calcPosition;
    private _calculateVelocity;
    private _checkOverlap;
    private _loadShapeData;
}
